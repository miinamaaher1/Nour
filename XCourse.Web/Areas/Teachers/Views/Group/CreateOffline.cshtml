@section Styles {
    <style>
        /* General Form Section Styling */
        .form-error-message {
            color: #721c24;
            /* Dark red */
            background-color: #f8d7da;
            /* Light red */
            border: 1px solid #f5c6cb;
            /* Medium red */
            padding: 10px 15px;
            margin: 10px;
            border-radius: 6px;
            /* Match input border-radius */
            display: none;
            /* Initially hidden */
        }

            .form-error-message i {
                margin-right: 8px;
            }

        .form-section {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
        }

        .form-container {
            background-color: var(--clr-surface);
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: 30px;
            width: 80%;
            max-width: 800px;
            margin: auto;
        }

        .form-group {
            margin-bottom: 20px;
            border-radius: 20px;
            margin-bottom: 10px;
            padding: 10px;
        }

        .form-header {
            text-align: center;
            padding: 10px;
            font-size: 1.5rem;
            font-weight: bold;
        }

        label {
            display: block;
            font-weight: 600;
            margin-bottom: 6px;
        }

        /* Input Fields Styling */
        input,
        select,
        textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--clr-border);
            border-radius: 6px;
            background-color: var(--clr-background);
            color: var(--clr-text-primary);
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            font-size: 1rem;
        }

            input:focus,
            select:focus,
            textarea:focus {
                outline: none;
                border-color: var(--clr-primary);
                box-shadow: 0 0 8px rgba(93, 42, 102, 0.5);
            }

            /* Date & Time Inputs */
            input[type="date"],
            input[type="time"] {
                margin-right: 10px;
                cursor: pointer;
            }

                input[type="date"]::-webkit-calendar-picker-indicator,
                input[type="time"]::-webkit-calendar-picker-indicator {
                    cursor: pointer;
                }

        /* Select Dropdown Styling */
        select {
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 16px;
            padding-right: 35px;
        }

            select::-ms-expand {
                display: none;
            }

            select option {
                background-color: var(--clr-background);
                color: var(--clr-text-primary);
            }

        /* Textarea Resizing */
        textarea {
            resize: vertical;
            min-height: 80px;
        }

        /* Radio & Checkbox Styling - FIXED */
        .radio-group,
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

            .radio-group label,
            .checkbox-group label {
                display: flex;
                align-items: center;
                font-weight: normal;
                margin-right: 0;
                cursor: pointer;
            }

        /* Fixed checkbox and radio styling */
        input[type="radio"],
        input[type="checkbox"] {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border: 2px solid var(--clr-border);
            background-color: var(--clr-background);
            margin-right: 8px;
            position: relative;
            cursor: pointer;
            flex-shrink: 0;
        }

        input[type="checkbox"] {
            border-radius: 4px;
        }

        input[type="radio"] {
            border-radius: 50%;
        }

            /* Fix for radio button checked state */
            input[type="radio"]:checked {
                border-color: var(--clr-primary);
                border-width: 2px;
            }

                input[type="radio"]:checked::after {
                    content: '';
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    width: 10px;
                    height: 10px;
                    border-radius: 50%;
                    background-color: var(--clr-primary);
                }

        /* Fix for checkbox checked state */
        input[type="checkbox"]:checked {
            background-color: var(--clr-primary);
            border-color: var(--clr-primary);
        }

            input[type="checkbox"]:checked::after {
                content: '';
                position: absolute;
                top: 4px;
                left: 9px;
                width: 5px;
                height: 10px;
                border: solid var(--clr-text-on-primary);
                border-width: 0 2px 2px 0;
                transform: rotate(45deg);
            }

        /* Hover state */
        input[type="radio"]:hover,
        input[type="checkbox"]:hover {
            border-color: var(--clr-primary);
        }

        /* Focus state */
        input[type="radio"]:focus,
        input[type="checkbox"]:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(93, 42, 102, 0.25);
        }

        /* Form Navigation Buttons */
        .form-navigation {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 20px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn:hover {
                transform: translateY(-2px);
            }

        .btn-primary {
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
        }

            .btn-primary:hover {
                background-color: var(--clr-primary);
                opacity: 0.9;
            }

        .btn-secondary {
            background-color: var(--clr-secondary);
            color: var(--clr-text-on-secondary);
        }

            .btn-secondary:hover {
                background-color: var(--clr-secondary);
                opacity: 0.9;
            }

        .session-table-wrapper {
            overflow-x: auto;
            margin-top: 10px;
        }

        .session-summary-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.95rem;
            background-color: #fff;
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.05);
        }

            .session-summary-table th,
            .session-summary-table td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
                vertical-align: middle;
            }

            .session-summary-table th {
                background-color: #f5f5f5;
                font-weight: 600;
            }

            .session-summary-table tr:nth-child(even) {
                background-color: #fafafa;
            }

            .session-summary-table tr:hover {
                background-color: #f0f0f0;
            }
    </style>

    <!--Animation styling-->
    <style>
        .demo-container {
            background-color: var(--clr-surface);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        h2 {
            color: var(--clr-primary);
            margin-bottom: 1rem;
        }

        .section-title {
            color: var(--clr-secondary);
            margin: 1.5rem 0;
        }

        /* Spinner 1 - Pulsing Circle */
        .spinner-pulse {
            width: 50px;
            height: 50px;
            background-color: var(--clr-primary);
            border-radius: 50%;
            animation: pulse 1.5s infinite ease-in-out;
        }

        @@keyframes pulse {
            0% {
                transform: scale(0.8);
                opacity: 0.7;
            }

            50% {
                transform: scale(1);
                opacity: 1;
            }

            100% {
                transform: scale(0.8);
                opacity: 0.7;
            }
        }

        /* Spinner 2 - Dot Wave */
        .dot-wave {
            display: flex;
            align-items: center;
            gap: 8px;
        }

            .dot-wave .dot {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background-color: var(--clr-accent);
                animation: wave 1.5s infinite ease-in-out;
            }

                .dot-wave .dot:nth-child(1) {
                    animation-delay: 0s;
                }

                .dot-wave .dot:nth-child(2) {
                    animation-delay: 0.2s;
                }

                .dot-wave .dot:nth-child(3) {
                    animation-delay: 0.4s;
                }

                .dot-wave .dot:nth-child(4) {
                    animation-delay: 0.6s;
                }

        @@keyframes wave {
            0%, 100% {
                transform: translateY(0);
            }

            50% {
                transform: translateY(-15px);
            }
        }

        /* Spinner 3 - Growing Bars */
        .growing-bars {
            display: flex;
            align-items: center;
            gap: 5px;
        }

            .growing-bars .bar {
                width: 8px;
                height: 30px;
                background-color: var(--clr-secondary);
                animation: grow 1.2s infinite ease-in-out;
            }

                .growing-bars .bar:nth-child(1) {
                    animation-delay: 0s;
                }

                .growing-bars .bar:nth-child(2) {
                    animation-delay: 0.2s;
                }

                .growing-bars .bar:nth-child(3) {
                    animation-delay: 0.4s;
                }

                .growing-bars .bar:nth-child(4) {
                    animation-delay: 0.6s;
                }

                .growing-bars .bar:nth-child(5) {
                    animation-delay: 0.8s;
                }

        @@keyframes grow {
            0%, 100% {
                transform: scaleY(0.5);
            }

            50% {
                transform: scaleY(1);
            }
        }

        /* Spinner 4 - FontAwesome Spin */
        .fa-spinner-container {
            font-size: 50px;
            color: var(--clr-primary);
            animation: spin 2s infinite linear;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Spinner 5 - Rotating Dots */
        .rotating-dots {
            position: relative;
            width: 60px;
            height: 60px;
        }

            .rotating-dots .dot {
                position: absolute;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: var(--clr-primary);
                animation: dots 1.5s infinite ease-in-out;
            }

                .rotating-dots .dot:nth-child(1) {
                    top: 0;
                    left: 50%;
                    transform: translateX(-50%);
                    animation-delay: 0s;
                }

                .rotating-dots .dot:nth-child(2) {
                    top: 25%;
                    right: 0;
                    animation-delay: 0.2s;
                }

                .rotating-dots .dot:nth-child(3) {
                    bottom: 0;
                    left: 50%;
                    transform: translateX(-50%);
                    animation-delay: 0.4s;
                }

                .rotating-dots .dot:nth-child(4) {
                    top: 25%;
                    left: 0;
                    animation-delay: 0.6s;
                }

        @@keyframes dots {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.5);
                opacity: 0.5;
            }
        }

        /* Spinner 6 - FontAwesome Pulse */
        .fa-pulse-container {
            font-size: 50px;
            color: var(--clr-accent);
            animation: pulse 1.5s infinite ease-in-out;
        }

        /* Spinner 7 - Circular Progress */
        .circular-progress {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: conic-gradient(var(--clr-primary) 0%, transparent 0%);
            position: relative;
            animation: progress 2s infinite linear;
        }

            .circular-progress::before {
                content: '';
                position: absolute;
                width: 45px;
                height: 45px;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                border-radius: 50%;
                background-color: var(--clr-surface);
            }

        @@keyframes progress {
            0% {
                background: conic-gradient(var(--clr-primary) 0%, transparent 0%);
            }

            25% {
                background: conic-gradient(var(--clr-primary) 90deg, transparent 0%);
            }

            50% {
                background: conic-gradient(var(--clr-primary) 180deg, transparent 0%);
            }

            75% {
                background: conic-gradient(var(--clr-primary) 270deg, transparent 0%);
            }

            100% {
                background: conic-gradient(var(--clr-primary) 360deg, transparent 0%);
            }
        }

        /* Spinner 8 - Text Dots */
        .text-dots {
            font-size: 24px;
            font-weight: bold;
            color: var(--clr-secondary);
        }

            .text-dots span {
                animation: fadeInOut 1.5s infinite;
            }

                .text-dots span:nth-child(1) {
                    animation-delay: 0s;
                }

                .text-dots span:nth-child(2) {
                    animation-delay: 0.5s;
                }

                .text-dots span:nth-child(3) {
                    animation-delay: 1s;
                }

        @@keyframes fadeInOut {
            0%, 100% {
                opacity: 0;
            }

            50% {
                opacity: 1;
            }
        }

        /* Spinner 9 - Dual Ring */
        .dual-ring {
            width: 60px;
            height: 60px;
            position: relative;
        }

            .dual-ring::after {
                content: '';
                display: block;
                width: 40px;
                height: 40px;
                margin: 10px;
                border-radius: 50%;
                border: 5px solid var(--clr-primary);
                border-color: var(--clr-primary) transparent var(--clr-primary) transparent;
                animation: dual-ring 1.2s linear infinite;
            }

        @@keyframes dual-ring {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Spinner 10 - FontAwesome Staggered */
        .fa-staggered {
            display: flex;
            gap: 8px;
        }

            .fa-staggered i {
                font-size: 20px;
                animation: fadeInOut 1.5s infinite;
            }

                .fa-staggered i:nth-child(1) {
                    animation-delay: 0s;
                    color: var(--clr-primary);
                }

                .fa-staggered i:nth-child(2) {
                    animation-delay: 0.3s;
                    color: var(--clr-secondary);
                }

                .fa-staggered i:nth-child(3) {
                    animation-delay: 0.6s;
                    color: var(--clr-accent);
                }

                .fa-staggered i:nth-child(4) {
                    animation-delay: 0.9s;
                    color: var(--clr-primary);
                }

        /* Spinner 11 - Gradient Progress Bar */
        .gradient-progress {
            width: 200px;
            height: 10px;
            background: var(--clr-surface);
            border-radius: 5px;
            overflow: hidden;
            position: relative;
        }

            .gradient-progress::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                width: 50%;
                background: linear-gradient(90deg, var(--clr-primary), var(--clr-accent));
                animation: progressMove 1.5s infinite ease-in-out;
            }

        @@keyframes progressMove {
            0% {
                left: -50%;
            }

            100% {
                left: 100%;
            }
        }

        /* Spinner 12 - Bouncing Ball */
        .bouncing-ball {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: var(--clr-accent);
            position: relative;
            animation: bounce 1s infinite alternate;
        }

            .bouncing-ball::after {
                content: '';
                position: absolute;
                bottom: -20px;
                width: 100%;
                height: 5px;
                background: rgba(0, 0, 0, 0.1);
                border-radius: 50%;
                filter: blur(2px);
                animation: shadow 1s infinite alternate;
            }

        @@keyframes bounce {
            0% {
                transform: translateY(0);
            }

            100% {
                transform: translateY(-30px);
            }
        }

        @@keyframes shadow {
            0% {
                transform: scale(1);
                opacity: 0.5;
            }

            100% {
                transform: scale(0.5);
                opacity: 0.2;
            }
        }
    </style>
}

<div class="row-12">
    <div class="form-container">

        <div class="form-header">
            <h1>Create a New Group</h1>
            <h4 id="xmodal-step-index">Loading...</h4>
        </div>

        <div id="xmodal-error" class="form-error-message">
        </div>

        <form id="createGroupForm" onsubmit="return false;">

            <div id="xmodal-body">
                <p>Loading form fields...</p>
            </div>

            <div class="form-navigation" id="xmodal-footer">
                <button type="button" id="xmodal-previous-button" class="btn btn-secondary" disabled>
                    <i class="fas fa-arrow-left icon"></i> Previous
                </button>
                <button type="button" id="xmodal-next-button" class="btn btn-primary">
                    <i class="fas fa-arrow-right icon"></i> Next
                </button>
                <button type="button" id="xmodal-submit" class="btn btn-primary" style="display: none;">
                    <i class="fas fa-check icon"></i> Submit
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>

        async function fetchData(url, method, requestBody) {
            if (requestBody) {
            }
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    },
                    body: (method !== 'GET' && method !== 'HEAD' && requestBody) ? JSON.stringify(requestBody) : undefined
                });


                if (!response.ok) {
                    let errorBody = null;
                    try {
                        errorBody = await response.json();
                        console.error("Error Response Body:", errorBody);
                    } catch (e) {
                        console.error("Could not parse error response body:", e);
                        try {
                            const textError = await response.text();
                            console.error("Error Response Text:", textError);
                        } catch (textE) {
                            console.error("Could not read error response as text:", textE);
                        }
                    }
                    throw new Error(`HTTP error! Status: ${response.status} ${response.statusText}. Check console for details.`);
                }

                const contentType = response.headers.get("content-type");
                if (response.status === 204 || !contentType || !contentType.includes("application/json")) {
                    return {};
                }

                const data = await response.json();
                return data;

            } catch (error) {
                console.error("Fetch Operation Error:", error);
                return null;
            }
        }


        class CreateGroupForm {
    constructor() {
        this.roomPricesById = {}; // Map roomId -> pricePerHour
                this.governoratesList = [
                    "Alexandria", "Aswan", "Asyut", "Beheira", "Beni Suef", "Cairo",
                    "Dakahlia", "Damietta", "Faiyum", "Gharbia", "Giza", "Ismailia",
                    "Kafr El Sheikh", "Luxor", "Matruh", "Minya", "Monufia", "New Valley",
                    "North Sinai", "Port Said", "Qalyubia", "Qena", "Red Sea", "Sharqia",
                    "Sohag", "South Sinai", "Suez"
                ];
                this.yearsList = [
                    { key: 0, value: "primary One" }, { key: 1, value: "primary Two" },
                    { key: 2, value: "primary Three" }, { key: 3, value: "primary Four" },
                    { key: 4, value: "primary Five" }, { key: 5, value: "primary Six" },
                    { key: 6, value: "preparatory One" }, { key: 7, value: "preparatory Two" },
                    { key: 8, value: "preparatory Three" }, { key: 9, value: "secondary One" },
                    { key: 10, value: "secondary Two" }, { key: 11, value: "secondary Three" }
                ];
                this.semestersList = [
                    { key: 1, value: "First Semester" }, { key: 2, value: "Second Semester" },
                    { key: 3, value: "Full Year" }
                ];
                this.weekDays = [
                    { key: "-- Choose Day --", value: 0 },
                    { key: "Saturday", value: 1 }, { key: "Sunday", value: 2 },
                    { key: "Monday", value: 4 }, { key: "Tuesday", value: 8 },
                    { key: "Wednesday", value: 16 }, { key: "Thursday", value: 32 },
                    { key: "Friday", value: 64 }
                ];

                this.teacherId = 1;


                this.groupData = {
                    governorate: "",
                    governorateName: "",
                    yearId: "",
                    yearName: "",
                    semesterId: "",
                    semesterName: "",
                    centerId: "",
                    centerName: "",
                    subjectId: "",
                    subjectName: "",
                    numberOfSessions: 0,
                    capacity: "",
                    sessions: [],
                    pricePerSession: "",
                    isPrivate: false,
                    isGirlsOnly: false
                };

                this.modalParts = {
                    modalBody: document.getElementById("xmodal-body"),
                    stepIndex: document.getElementById("xmodal-step-index"),
                    nextButton: document.getElementById("xmodal-next-button"),
                    previousButton: document.getElementById("xmodal-previous-button"),
                    submitButton: document.getElementById("xmodal-submit"),
                    errorMessage: document.getElementById("xmodal-error")
                };

                this.maxSteps = 5;

                if (!this.modalParts.modalBody || !this.modalParts.stepIndex || !this.modalParts.nextButton || !this.modalParts.previousButton || !this.modalParts.submitButton || !this.modalParts.errorMessage) {
                    console.error("One or more modal elements not found in the DOM!");
                    if (this.modalParts.modalBody) {
                        this.modalParts.modalBody.innerHTML = "<p style='color: red;'>Error: Could not initialize modal form. Required HTML elements are missing.</p>";
                    }
                    return;
                }
                if (!this.teacherId) {
                    console.error("CRITICAL: Teacher ID is missing. Cannot create group.");
                    this.RenderError("Cannot proceed: Teacher information is missing.");
                    if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true;
                    if (this.modalParts.previousButton) this.modalParts.previousButton.disabled = true;
                    if (this.modalParts.submitButton) this.modalParts.submitButton.disabled = true;
                    return;
                }

                this.modalParts.nextButton.addEventListener("click", () => this.next());
                this.modalParts.previousButton.addEventListener("click", () => this.previous());
                this.modalParts.submitButton.addEventListener("click", async () => {
                    await this.SubmitFinal();
                });
            }

            set stepNumber(value) {
                const newStep = Math.max(1, Math.min(value, this.maxSteps));
                this._stepNumber = newStep;

                if (this.modalParts.stepIndex) {
                    this.modalParts.stepIndex.innerHTML = `Step ${this._stepNumber} of ${this.maxSteps}`;
                }
                if (this.modalParts.previousButton) {
                    this.modalParts.previousButton.disabled = (this._stepNumber <= 1);
                }
                if (this.modalParts.nextButton) {
                    const isLastStep = (this._stepNumber === this.maxSteps);
                    this.modalParts.nextButton.disabled = isLastStep;
                    this.modalParts.nextButton.style.display = isLastStep ? 'none' : 'inline-block';
                }
                if (this.modalParts.submitButton) {
                    this.modalParts.submitButton.style.display = (this._stepNumber === this.maxSteps) ? 'inline-block' : 'none';
                    this.modalParts.submitButton.disabled = false;
                }
                this.ClearError();
            }
            get stepNumber() {
                return this._stepNumber;
            }

            next() {
                if (this.stepNumber >= this.maxSteps) return;

                let result = { isValid: false, errors: ["Validation function not implemented for this step."] };

                switch (this.stepNumber) {
                    case 1: result = this.SubmitStage01(); break;
                    case 2: result = this.SubmitStage02(); break;
                    case 3: result = this.SubmitStage03(); break;
                    case 4: result = this.SubmitStage04(); break;
                    default:
                        console.error("Invalid step number in next():", this.stepNumber);
                        this.RenderError("An internal error occurred (invalid step).");
                        return;
                }

                if (result.isValid) {
                    this.ClearError();
                    const nextStepNumber = this.stepNumber + 1;
                    switch (nextStepNumber) {
                        case 2: this.RenderStage02(); break;
                        case 3: this.RenderStage03(); break;
                        case 4: this.RenderStage04(); break;
                        case 5: this.RenderFinalSubmit(); break;
                        default:
                            console.error("Tried to navigate beyond the last step:", nextStepNumber);
                            break;
                    }
                } else {
                    this.RenderError(result.errors && result.errors.length > 0 ? result.errors[0] : "Please complete the required fields correctly.");
                }
            }

            previous() {
                if (this.stepNumber <= 1) return;

                this.ClearError();
                const prevStepNumber = this.stepNumber - 1;

                switch (prevStepNumber) {
                    case 1: this.RenderStage01(); break;
                    case 2: this.RenderStage02(); break;
                    case 3: this.RenderStage03(); break;
                    case 4: this.RenderStage04(); break;
                    default:
                        console.error("Invalid step number in previous():", prevStepNumber);
                        break;
                }
            }

            RenderBodyLoadingAnimation() {
                if (this.modalParts.modalBody) {
                    this.modalParts.modalBody.innerHTML = `
                    <div class="demo-container" style="margin: auto;">
                        <div class="dot-wave">
                            <div class="dot"></div><div class="dot"></div><div class="dot"></div><div class="dot"></div>
                        </div>
                    </div>
                    `;
                }
                this.modalParts.errorMessage.style.display = 'none';
            }
            RenderButtonLoadingAnimation(isLoading = true) {
                if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = isLoading;
                if (this.modalParts.previousButton) this.modalParts.previousButton.disabled = isLoading;
                if (this.modalParts.submitButton) {
                    this.modalParts.submitButton.disabled = isLoading;
                    if (this.stepNumber === this.maxSteps) {
                        this.modalParts.submitButton.textContent = isLoading ? 'Submitting...' : 'Submit Group';
                    }
                }
            }
            StopButtonLoadingAnimation() {
                this.RenderButtonLoadingAnimation(false);
                this.stepNumber = this.stepNumber;
            }
            RenderError(message) {
                if (this.modalParts.errorMessage) {
                    this.modalParts.errorMessage.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;
                    this.modalParts.errorMessage.style.display = 'block';
                }
                console.error("Rendered Error:", message);
            }
            ClearError() {
                if (this.modalParts.errorMessage) {
                    this.modalParts.errorMessage.innerHTML = '';
                    this.modalParts.errorMessage.style.display = 'none';
                }
            }

            async fetchMatchingGrades(){
                let years = await fetchData("/Teachers/Group/Years", "POST", {});
                if (Array.isArray(years)) {
                    this.yearsList = this.yearsList.filter(element => years.includes(element.key));
                } else {
                    console.error("Invalid data returned for years:", years);
                    this.yearsList = [];
                }
            }

            async RenderStage01() {
                this.RenderBodyLoadingAnimation();
                await this.fetchMatchingGrades();
                const governorateItems = this.governoratesList
                    .map(element => `<option value="${element}">${element}</option>`)
                    .join('');
                const yearItems = this.yearsList
                    .map(element => `<option value="${element.key}">${element.value}</option>`)
                    .join('');
                const semesterItems = this.semestersList
                    .map(element => `<option value="${element.key}">${element.value}</option>`)
                    .join('');

                this.modalParts.modalBody.innerHTML = `
                    <div class="form-group">
                        <label for="governorateSelect">Governorate:</label>
                        <select id="governorateSelect" name="governorate">
                            <option value="" selected disabled>-- choose the governorate --</option>
                            ${governorateItems}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="yearSelect">Grade:</label>
                        <select id="yearSelect" name="year">
                            <option value="" selected disabled>-- choose the grade --</option>
                            ${yearItems}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="semesterSelect">Semester:</label>
                        <select id="semesterSelect" name="semester">
                            <option value="" selected disabled>-- choose the semester --</option>
                            ${semesterItems}
                        </select>
                    </div>
                `;

                const govSel = document.getElementById("governorateSelect");
                if (govSel) govSel.value = this.groupData.governorate || "";
                const yearSel = document.getElementById("yearSelect");
                if (yearSel) yearSel.value = this.groupData.yearId || "";
                const semSel = document.getElementById("semesterSelect");
                if (semSel) semSel.value = this.groupData.semesterId || "";

                this.stepNumber = 1;
                this.StopButtonLoadingAnimation();
            }

            SubmitStage01() {
                const status = { errors: [], isValid: true };
                const govSel = document.getElementById("governorateSelect");
                const yearSel = document.getElementById("yearSelect");
                const semSel = document.getElementById("semesterSelect");

                if (!govSel || !yearSel || !semSel) {
                    status.errors.push("Internal Error: Form elements missing (Stage 1).");
                    status.isValid = false;
                    return status;
                }
                const govVal = govSel.value;
                const yearVal = yearSel.value;
                const semVal = semSel.value;

                if (!govVal) { status.errors.push("Governorate is required."); status.isValid = false; }
                if (!yearVal) { status.errors.push("Grade is required."); status.isValid = false; }
                if (!semVal) { status.errors.push("Semester is required."); status.isValid = false; }

                if (status.isValid) {
                    this.groupData.governorate = govVal;
                    this.groupData.governorateName = govSel.options[govSel.selectedIndex]?.text || govVal;
                    this.groupData.yearId = yearVal;
                    this.groupData.yearName = yearSel.options[yearSel.selectedIndex]?.text || `Year ${yearVal}`;
                    this.groupData.semesterId = semVal;
                    this.groupData.semesterName = semSel.options[semSel.selectedIndex]?.text || `Semester ${semVal}`;
                }
                return status;
            }


            async RenderStage02() {
                this.RenderBodyLoadingAnimation();
                this.RenderButtonLoadingAnimation(true);

                try {
                    const yearIdNum = Number(this.groupData.yearId);
                    const semesterIdNum = Number(this.groupData.semesterId);

                    const [centersData, subjectsData] = await Promise.all([
                        fetchData("/Teachers/Group/Centers", "POST", {
                            governorate: this.groupData.governorate
                        }),
                        fetchData("/Teachers/Group/Subjects", "POST", {
                            Year: yearIdNum,
                            Semester: semesterIdNum
                        })
                    ]);

                    if (centersData === null || subjectsData === null) {
                        this.RenderError("Failed to load Centers or Subjects. Please check network or go back.");
                        this.StopButtonLoadingAnimation();
                        this.modalParts.nextButton.disabled = true;
                        return;
                    }
                    if (!Array.isArray(centersData) || !Array.isArray(subjectsData)) {
                        console.error("API did not return arrays for centers/subjects:", { centersData, subjectsData });
                        this.RenderError("Received invalid data for Centers or Subjects.");
                        this.StopButtonLoadingAnimation();
                        this.modalParts.nextButton.disabled = true;
                        return;
                    }

                    const centerItems = centersData.map(c => `<option value="${c.centerId}" ${String(c.centerId) === String(this.groupData.centerId) ? "selected" : ""}>${c.centerName}</option>`).join('');
                    const subjectItems = subjectsData.map(s => `<option value="${s.id}" ${String(s.id) === String(this.groupData.subjectId) ? "selected" : ""}>${s.topic}</option>`).join('');
                    let sessionItems = "";
                    for (let i = 1; i <= 7; i++) {
                        sessionItems += `<option value="${i}" ${i === this.groupData.numberOfSessions ? "selected" : ""}>${i}</option>`;
                    }

                    this.modalParts.modalBody.innerHTML = `
                        <div class="form-group">
                            <label for="centerSelect">Center:</label>
                            <select id="centerSelect" name="center">
                                <option value="" disabled ${!this.groupData.centerId ? 'selected' : ''}>-- Choose center --</option>
                                ${centerItems.length > 0 ? centerItems : '<option value="" disabled>No centers found</option>'}
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="subjectSelect">Subject:</label>
                            <select id="subjectSelect" name="subject">
                                <option value="" disabled ${!this.groupData.subjectId ? 'selected' : ''}>-- Choose subject --</option>
                                ${subjectItems.length > 0 ? subjectItems : '<option value="" disabled>No subjects found</option>'}
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="numberOfSessionsSelect">Sessions per week:</label>
                            <select id="numberOfSessionsSelect" name="numberOfSessions">
                                <option value="0" disabled ${!this.groupData.numberOfSessions || this.groupData.numberOfSessions === 0 ? 'selected' : ''}>-- Choose number --</option>
                                ${sessionItems}
                            </select>
                        </div>

                        <hr/>

                        <div class="form-group">
                            <label for="pricePerSessionInput">Price Per Session (EGP):</label>
                            <input type="number" id="pricePerSessionInput" name="pricePerSession" placeholder="e.g., 50" min="0" step="1" value="${this.groupData.pricePerSession || ''}">
                        </div>

                        <div class="form-group" style="display: flex; align-items: center; gap: 15px;">
                            <div style="flex-grow: 1; display:flex; justify-content:flex-start; align-items:center;">
                                <input type="checkbox" id="isPrivateCheckbox" name="isPrivate" ${this.groupData.isPrivate ? 'checked' : ''}>
                                <label for="isPrivateCheckbox" style="display: inline-block; margin-left: 5px; margin-bottom: 0;">Private Group?</label>
                            </div>
                             <div style="flex-grow: 1; display:flex; justify-content:flex-start; align-items:center;">
                                <input type="checkbox" id="isGirlsOnlyCheckbox" name="isGirlsOnly" ${this.groupData.isGirlsOnly ? 'checked' : ''}>
                                <label for="isGirlsOnlyCheckbox" style="display: inline-block; margin-left: 5px; margin-bottom: 0;">Girls Only?</label>
                            </div>
                        </div>
                        `;

                    this.stepNumber = 2;
                    this.StopButtonLoadingAnimation();

                } catch (error) {
                    console.error("Error fetching or rendering stage 2:", error);
                    this.RenderError("An error occurred loading options. Please go back and try again.");
                    this.StopButtonLoadingAnimation();
                    if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true;
                }
            }

            SubmitStage02() {
                const status = { errors: [], isValid: true };


                const centerSelect = document.getElementById("centerSelect");
                const subjectSelect = document.getElementById("subjectSelect");
                const numberOfSessionsSelect = document.getElementById("numberOfSessionsSelect");


                const priceInput = document.getElementById("pricePerSessionInput");
                const isPrivateCheckbox = document.getElementById("isPrivateCheckbox");
                const isGirlsOnlyCheckbox = document.getElementById("isGirlsOnlyCheckbox");


                if (!centerSelect || !subjectSelect || !numberOfSessionsSelect || !priceInput || !isPrivateCheckbox || !isGirlsOnlyCheckbox) {
                    status.errors.push("Internal Error: Form elements missing (Stage 2).");
                    status.isValid = false;
                    return status;
                }

                const centerValue = centerSelect.value;
                const subjectValue = subjectSelect.value;
                const sessionsValue = parseInt(numberOfSessionsSelect.value, 10);
                const priceValueStr = priceInput.value;
                const isPrivateValue = isPrivateCheckbox.checked;
                const isGirlsOnlyValue = isGirlsOnlyCheckbox.checked;


                centerSelect.style.border = '';
                subjectSelect.style.border = '';
                numberOfSessionsSelect.style.border = '';
                priceInput.style.border = '';


                if (!centerValue) { status.errors.push("Center selection is required."); status.isValid = false; centerSelect.style.border = '1px solid red'; }
                if (!subjectValue) { status.errors.push("Subject selection is required."); status.isValid = false; subjectSelect.style.border = '1px solid red'; }
                if (isNaN(sessionsValue) || sessionsValue <= 0) { status.errors.push("Number of sessions must be 1 or more."); status.isValid = false; numberOfSessionsSelect.style.border = '1px solid red'; }


                let priceNumber = null;
                if (priceValueStr === null || priceValueStr.trim() === '') {
                    status.errors.push("Price per session is required."); status.isValid = false; priceInput.style.border = '1px solid red';
                } else {
                    priceNumber = parseFloat(priceValueStr);
                    if (isNaN(priceNumber) || priceNumber < 0) {
                        status.errors.push("Price per session must be a valid non-negative number."); status.isValid = false; priceInput.style.border = '1px solid red';
                    }
                }



                if (status.isValid) {
                    const oldNumberOfSessions = this.groupData.numberOfSessions;

                    this.groupData.centerId = centerValue;
                    this.groupData.centerName = centerSelect.options[centerSelect.selectedIndex]?.text || centerValue;

                    this.groupData.subjectId = subjectValue;
                    this.groupData.subjectName = subjectSelect.options[subjectSelect.selectedIndex]?.text || `Subject ${subjectValue}`;

                    this.groupData.numberOfSessions = sessionsValue;


                    this.groupData.pricePerSession = priceNumber;
                    this.groupData.isPrivate = isPrivateValue;
                    this.groupData.isGirlsOnly = isGirlsOnlyValue;



                    if (oldNumberOfSessions !== this.groupData.numberOfSessions) {
                        this.groupData.sessions = [];
                    }
                }

                return status;
            }

            RenderStage03() {
                const numberOfSessions = this.groupData.numberOfSessions;

                if (isNaN(numberOfSessions) || numberOfSessions <= 0) {
                    console.error("RenderStage03 called with invalid numberOfSessions:", numberOfSessions);
                    this.RenderError("Invalid number of sessions. Please go back to Step 2.");
                    this.modalParts.modalBody.innerHTML = "";
                    if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true;
                    this.stepNumber = 3;
                    this.StopButtonLoadingAnimation();
                    return;
                }

                if (!Array.isArray(this.groupData.sessions) || this.groupData.sessions.length !== numberOfSessions) {
                    this.groupData.sessions = Array(numberOfSessions).fill(null).map((_, index) => ({
                        sessionId: index + 1, dayId: "", dayName: "", startTime: "", endTime: "",
                        startDate: "", endDate: "", roomId: "", roomName: ""
                    }));
                }

                let innerHtml = `
                    <div class="form-group">
                        <label for="capacity">Maximum Students:</label>
                        <input type="number" id="capacity" name="capacity" placeholder="Enter max students" min="1" value="${this.groupData.capacity || ''}">
                    </div>
                    <hr/><h4>Session Details:</h4>`;

                for (let i = 0; i < numberOfSessions; i++) {
                    const sessionData = this.groupData.sessions[i] || {};
                    const sessionIndex = i + 1;
                    innerHtml += `
                        <div class="form-group border rounded p-3 mb-3"><h5>Session ${sessionIndex}</h5><div class="row g-3">
                            <div class="col-md-4"><label for="Session-${sessionIndex}-Day">Day:</label><select id="Session-${sessionIndex}-Day" name="sessionDay${sessionIndex}">
                                ${this.weekDays.map(d => `<option value="${d.value}" ${String(sessionData.dayId) === String(d.value) ? "selected" : ""} ${d.value === 0 ? "disabled" : ""}>${d.key}</option>`).join('')}
                            </select></div>
                            <div class="col-md-4"><label for="Session-${sessionIndex}-StartTime">Start Time:</label><input type="time" id="Session-${sessionIndex}-StartTime" name="sessionStartTime${sessionIndex}" value="${sessionData.startTime || ''}"></div>
                            <div class="col-md-4"><label for="Session-${sessionIndex}-EndTime">End Time:</label><input type="time" id="Session-${sessionIndex}-EndTime" name="sessionEndTime${sessionIndex}" value="${sessionData.endTime || ''}"></div>
                            <div class="col-md-6"><label for="Session-${sessionIndex}-StartDate">Start Date:</label><input type="date" id="Session-${sessionIndex}-StartDate" name="sessionStartDate${sessionIndex}" value="${sessionData.startDate || ''}"></div>
                            <div class="col-md-6"><label for="Session-${sessionIndex}-EndDate">End Date:</label><input type="date" id="Session-${sessionIndex}-EndDate" name="sessionEndDate${sessionIndex}" value="${sessionData.endDate || ''}"></div>
                        </div></div>`;
                }
                this.modalParts.modalBody.innerHTML = innerHtml;
                this.stepNumber = 3;
                this.StopButtonLoadingAnimation();
            }

            SubmitStage03() {
                const status = { errors: [], isValid: true };
                const numberOfSessions = this.groupData.numberOfSessions;

                const capElem = document.getElementById("capacity");
                if (!capElem) { status.errors.push("Internal Error: Capacity input missing."); status.isValid = false; }
                else {
                    const capVal = parseInt(capElem.value, 10);
                    capElem.style.border = '';
                    if (isNaN(capVal) || capVal <= 0) { status.isValid = false; status.errors.push("Max Students must be > 0."); capElem.style.border = '1px solid red'; }
                    else { this.groupData.capacity = capVal; }
                }

                const tempSessions = [];
                const uniqueDays = new Set();
                for (let i = 0; i < numberOfSessions; i++) {
                    const idx = i + 1;
                    let sessValid = true;
                    const sessData = { sessionId: idx, dayId: "", dayName: "", startTime: "", endTime: "", startDate: "", endDate: "", roomId: this.groupData.sessions[i]?.roomId || "", roomName: this.groupData.sessions[i]?.roomName || "" };
                    const daySel = document.getElementById(`Session-${idx}-Day`);
                    const startT = document.getElementById(`Session-${idx}-StartTime`);
                    const endT = document.getElementById(`Session-${idx}-EndTime`);
                    const startD = document.getElementById(`Session-${idx}-StartDate`);
                    const endD = document.getElementById(`Session-${idx}-EndDate`);

                    if (!daySel || !startT || !endT || !startD || !endD) { status.errors.push(`Internal Error: Elements missing Session ${idx}.`); status.isValid = false; sessValid = false; continue; }

                    [daySel, startT, endT, startD, endD].forEach(el => el.style.border = '');

                    sessData.dayId = daySel.value; sessData.dayName = daySel.options[daySel.selectedIndex]?.text || "";
                    sessData.startTime = startT.value; sessData.endTime = endT.value;
                    sessData.startDate = startD.value; sessData.endDate = endD.value;

                    if (!sessData.dayId || sessData.dayId === "0") { status.errors.push(`Session ${idx}: Day required.`); sessValid = false; daySel.style.border = '1px solid red'; }
                    else { if (uniqueDays.has(sessData.dayId)) { status.errors.push(`Session ${idx}: Day '${sessData.dayName}' already used.`); sessValid = false; daySel.style.border = '1px solid red'; } else { uniqueDays.add(sessData.dayId); } }
                    if (!sessData.startTime) { status.errors.push(`Session ${idx}: Start Time required.`); sessValid = false; startT.style.border = '1px solid red'; }
                    if (!sessData.endTime) { status.errors.push(`Session ${idx}: End Time required.`); sessValid = false; endT.style.border = '1px solid red'; }
                    if (sessData.startTime && sessData.endTime && sessData.endTime <= sessData.startTime) { status.errors.push(`Session ${idx}: End Time <= Start Time.`); sessValid = false; startT.style.border = '1px solid red'; endT.style.border = '1px solid red'; }
                    if (!sessData.startDate) { status.errors.push(`Session ${idx}: Start Date required.`); sessValid = false; startD.style.border = '1px solid red'; }
                    if (!sessData.endDate) { status.errors.push(`Session ${idx}: End Date required.`); sessValid = false; endD.style.border = '1px solid red'; }
                    if (sessData.startDate && sessData.endDate && sessData.endDate < sessData.startDate) { status.errors.push(`Session ${idx}: End Date < Start Date.`); sessValid = false; startD.style.border = '1px solid red'; endD.style.border = '1px solid red'; }

                    tempSessions.push(sessData);
                    if (!sessValid) { status.isValid = false; }
                }

                if (status.isValid) { this.groupData.sessions = tempSessions; }
                return status;
            }

            async RenderStage04() {
                this.RenderBodyLoadingAnimation();
                this.RenderButtonLoadingAnimation(true);

                if (!this.groupData.sessions || this.groupData.sessions.length !== this.groupData.numberOfSessions) {
                    console.error("RenderStage04: Session data mismatch.", this.groupData);
                    this.RenderError("Session details missing. Please go back to Step 3.");
                    this.StopButtonLoadingAnimation();
                    if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true;
                    return;
                }

                let allFetchesOK = true, allRoomsFound = true;
                const promises = this.groupData.sessions.map(async (session, index) => {
                    const idx = index + 1;
                    const reqBody = { centerID: Number(this.groupData.centerId), startDate: session.startDate, startTime: `${session.startTime}:00`, endDate: session.endDate, endTime: `${session.endTime}:00`, capacity: Number(this.groupData.capacity), day: Number(session.dayId) };
                    const rooms = await fetchData("/Teachers/Group/Rooms", "POST", reqBody);

                    if (rooms === null) { allFetchesOK = false; return { idx, html: `<div class="form-group border rounded p-3 mb-3 session-room-block"><h5>Room Session ${idx} (${session.dayName}...)</h5><p class="text-danger">Error loading rooms.</p></div>` }; }
                    if (!Array.isArray(rooms)) { allFetchesOK = false; return { idx, html: `<div class="form-group border rounded p-3 mb-3 session-room-block"><h5>Room Session ${idx} (${session.dayName}...)</h5><p class="text-danger">Invalid room data.</p></div>` }; }
                    if (rooms.length === 0) { allRoomsFound = false; return { idx, html: `<div class="form-group border rounded p-3 mb-3 session-room-block"><h5>Room Session ${idx} (${session.dayName}...)</h5><p class="text-warning">No rooms available.</p><input type="hidden" id="Session-${idx}-Room" value=""></div>` }; }

                    // Store prices for each room in this.roomPricesById
                    rooms.forEach(r => { this.roomPricesById[r.id] = r.pricePerHour; });
                    const roomItems = rooms.map(r => `<option value="${r.id}" ${String(session.roomId) === String(r.id) ? "selected" : ""}>${r.name} (Cap: ${r.capacity}, Price: ${r.pricePerHour})</option>`).join('');
                    return { idx, html: `<div class="form-group border rounded p-3 mb-3 session-room-block"><h5>Room Session ${idx} (${session.dayName} ${session.startTime}-${session.endTime})</h5><label for="Session-${idx}-Room">Available:</label><select id="Session-${idx}-Room" name="sessionRoom${idx}"><option value="" disabled ${!session.roomId ? 'selected' : ''}>-- Select room --</option>${roomItems}</select></div>` };
                });

                try {
                    const results = await Promise.all(promises);
                    results.sort((a, b) => a.idx - b.idx);
                    this.modalParts.modalBody.innerHTML = `<h4>Select Rooms:</h4>` + results.map(r => r.html).join('');

                    if (allFetchesOK && allRoomsFound) { this.stepNumber = 4; this.StopButtonLoadingAnimation(); }
                    else if (!allFetchesOK) { this.RenderError("Could not load room options. Try again."); this.StopButtonLoadingAnimation(); if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true; }
                    else { this.RenderError("No rooms found for one or more sessions."); this.StopButtonLoadingAnimation(); if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true; }
                } catch (error) {
                    console.error("Error processing room fetches:", error); this.RenderError("Error processing room info."); this.StopButtonLoadingAnimation(); if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true;
                }
            }

            SubmitStage04() {
                const status = { errors: [], isValid: true };
                const numSess = this.groupData.numberOfSessions;
                if (!this.groupData.sessions || this.groupData.sessions.length !== numSess) { status.errors.push("Internal Error: Session mismatch Stage 4."); status.isValid = false; return status; }

                for (let i = 0; i < numSess; i++) {
                    const idx = i + 1;
                    const roomSel = document.getElementById(`Session-${idx}-Room`);
                    const block = roomSel?.closest('.session-room-block');
                    if (block) block.style.border = '1px solid #dee2e6';

                    if (!roomSel) { const noRoomMsg = block?.querySelector('.text-warning, .text-danger'); if (!noRoomMsg) { status.errors.push(`Internal Error: Room select missing Session ${idx}.`); status.isValid = false; if (block) block.style.border = '1px solid red'; } continue; }

                    const selRoomId = roomSel.value;
                    roomSel.style.border = '';
                    if (!selRoomId || selRoomId === "") { status.errors.push(`Session ${idx} (${this.groupData.sessions[i].dayName}): Select a room.`); status.isValid = false; if (block) block.style.border = '1px solid red'; roomSel.style.border = '1px solid red'; }
                    else {
                        this.groupData.sessions[i].roomId = selRoomId;
                        const roomTxt = roomSel.options[roomSel.selectedIndex]?.text || "";
                        this.groupData.sessions[i].roomName = roomTxt.split(' (')[0] || `Room ${selRoomId}`;
                        // Save pricePerHour for this session
                        this.groupData.sessions[i].pricePerHour = this.roomPricesById[selRoomId] || 0;
                    }
                }
                return status;
            }

            RenderFinalSubmit() {
                this.RenderBodyLoadingAnimation();

                const baseDataValid = [
                    this.groupData.governorateName, this.groupData.yearName, this.groupData.semesterName,
                    this.groupData.centerName, this.groupData.subjectName, this.groupData.capacity,
                    (this.groupData.pricePerSession !== "" && this.groupData.pricePerSession !== null && !isNaN(parseFloat(this.groupData.pricePerSession)) && parseFloat(this.groupData.pricePerSession) >= 0),
                ].every(Boolean);

                const sessionsValid = Array.isArray(this.groupData.sessions) &&
                    this.groupData.sessions.length === this.groupData.numberOfSessions &&
                    this.groupData.sessions.length > 0 &&
                    this.groupData.sessions.every(s => s.roomId && s.roomName);

                if (!baseDataValid || !sessionsValid) {
                    console.error("RenderFinalSubmit: Missing or invalid data.", this.groupData);
                    this.RenderError("Cannot display confirmation. Required information is missing or invalid from previous steps. Please go back and review.");
                    this.StopButtonLoadingAnimation();
                    if (this.modalParts.nextButton) this.modalParts.nextButton.disabled = true;
                    if (this.modalParts.submitButton) this.modalParts.submitButton.style.display = 'none';
                    return;
                }

                // Add custom CSS for confirmation cards if not already present
                if (!document.getElementById('confirm-cards-style')) {
                    const style = document.createElement('style');
                    style.id = 'confirm-cards-style';
                    style.innerHTML = `
.confirm-cards-container {
    display: flex;
    flex-wrap: wrap;
    gap: 24px;
    justify-content: center;
    margin: 0 0 32px 0;
}
.confirm-card {
    background: var(--clr-surface);
    border: 2px solid var(--clr-border);
    border-radius: 18px;
    box-shadow: 0 4px 24px var(--clr-overlay);
    padding: 32px 36px;
    min-width: 320px;
    max-width: 420px;
    flex: 1 1 340px;
    text-align: left;
    color: var(--clr-text-primary);
    margin-bottom: 0;
}
.confirm-card .card-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--clr-primary);
    margin-bottom: 18px;
    letter-spacing: 0.5px;
}
.confirm-card .total-amount {
    font-size: 2.5rem;
    font-weight: 900;
    color: var(--clr-accent);
    margin-bottom: 8px;
}
.confirm-card .total-label {
    font-size: 1.1rem;
    color: var(--clr-secondary);
    margin-bottom: 4px;
}
.confirm-card .card-section {
    margin-bottom: 12px;
}
.confirm-card .session-table-wrapper {
    margin-top: 12px;
}
.confirm-card .session-summary-table {
    width: 100%;
    border-collapse: collapse;
    background: var(--clr-background);
    color: var(--clr-text-primary);
    border-radius: 10px;
    overflow: hidden;
}
.confirm-card .session-summary-table th, .confirm-card .session-summary-table td {
    border: 1px solid var(--clr-border);
    padding: 8px 12px;
    text-align: center;
}
.confirm-card .session-summary-table th {
    background: var(--clr-primary);
    color: var(--clr-text-on-primary);
    font-weight: 600;
}
.confirm-card .session-summary-table td {
    background: var(--clr-surface);
}
.vertical-summary-table {
    width: 100%;
    border-collapse: collapse;
    background: var(--clr-surface);
    color: var(--clr-text-primary);
    border-radius: 10px;
    overflow: hidden;
}
.vertical-summary-table th, .vertical-summary-table td {
    border: 1px solid var(--clr-border);
    padding: 10px 14px;
}
.vertical-summary-table th {
    text-align: left;
    width: 40%;
    color: var(--clr-secondary);
    font-weight: 600;
}
                    `;
                    document.head.appendChild(style);
                }
                let summaryHtml = `
                <h3 class="form-header" style="color:var(--clr-primary);text-align:center;margin-bottom:24px;">Confirm Group Details</h3>
                <div class="confirm-card" style="margin:auto;max-width:600px;">
                    <table class="vertical-summary-table" style="width:100%;margin-bottom:28px;border-collapse:collapse;background:var(--clr-surface);color:var(--clr-text-primary);border-radius:10px;overflow:hidden;">
                        <tbody>
                            <tr><th style="text-align:left;padding:10px 14px;">Governorate</th><td style="padding:10px 14px;">${this.groupData.governorateName}</td></tr>
                            <tr><th style="text-align:left;padding:10px 14px;">Grade</th><td style="padding:10px 14px;">${this.groupData.yearName}</td></tr>
                            <tr><th style="text-align:left;padding:10px 14px;">Semester</th><td style="padding:10px 14px;">${this.groupData.semesterName}</td></tr>
                            <tr><th style="text-align:left;padding:10px 14px;">Center</th><td style="padding:10px 14px;">${this.groupData.centerName}</td></tr>
                            <tr><th style="text-align:left;padding:10px 14px;">Subject</th><td style="padding:10px 14px;">${this.groupData.subjectName}</td></tr>
                            <tr><th style="text-align:left;padding:10px 14px;">Capacity</th><td style="padding:10px 14px;">${this.groupData.capacity}</td></tr>
                        </tbody>
                    </table>
                    <div class="session-table-wrapper">
                        <table class="session-summary-table" style="width:100%;border-collapse:collapse;background:var(--clr-background);color:var(--clr-text-primary);border-radius:10px;overflow:hidden;">
                            <thead>
                                <tr>
                                    <th>Day</th>
                                    <th>Time</th>
                                    <th>Dates</th>
                                    <th>Room</th>
                                </tr>
                            </thead>
                            <tbody>`;

                // --- Calculate Total Price ---
                let totalPrice = 0;
                this.groupData.sessions.forEach(session => {
                    function countSessions(startDateStr, endDateStr, weekday) {
                        if (!startDateStr || !endDateStr || !weekday) return 0;
                        let start = new Date(startDateStr);
                        let end = new Date(endDateStr);
                        let wd = Number(weekday);
                        let jsDay = [0,1,2,3,4,5,6].find(d => (1<<d) === wd);
                        if (jsDay === undefined) return 0;
                        let current = new Date(start);
                        while(current.getDay() !== jsDay && current <= end) {
                            current.setDate(current.getDate() + 1);
                        }
                        let count = 0;
                        while(current <= end) {
                            count++;
                            current.setDate(current.getDate() + 7);
                        }
                        return count;
                    }
                    function getDuration(start, end) {
                        if (!start || !end) return 0;
                        const [sh, sm] = start.split(":").map(Number);
                        const [eh, em] = end.split(":").map(Number);
                        return ((eh*60+em)-(sh*60+sm))/60;
                    }
                    const numSess = countSessions(session.startDate, session.endDate, session.dayId);
                    const duration = getDuration(session.startTime, session.endTime);
                    const price = session.pricePerHour || 0;
                    totalPrice += numSess * duration * price;
                });

                
                this.groupData.sessions.forEach((session, i) => {
                    summaryHtml += `
                        <tr>
                            <td>${session.dayName || 'N/A'}</td>
                            <td>${session.startTime || 'N/A'} - ${session.endTime || 'N/A'}</td>
                            <td>${session.startDate || 'N/A'} to ${session.endDate || 'N/A'}</td>
                            <td>${session.roomName || 'N/A'} <span style="font-size: 0.85em;">(ID: ${session.roomId || 'N/A'})</span></td>
                        </tr>`;
                });
                summaryHtml += `
                        </tbody>
                    </table>
                </div>`;
                summaryHtml += `
                    <div style="display:flex;justify-content:center;margin:32px 0 24px 0;">
                        <div style="background:#fff7e6;border:2px solid #fbbf24;border-radius:18px;box-shadow:0 4px 24px #fbbf2422;padding:32px 48px;min-width:340px;text-align:center;">
                            <div style="font-size:1.5rem;font-weight:bold;color:#333;margin-bottom:10px;letter-spacing:0.5px;">Total Amount to Pay</div>
                            <div style="font-size:2.8rem;font-weight:900;color:#eab308;line-height:1.1;letter-spacing:1px;">EGP ${totalPrice.toLocaleString(undefined, {minimumFractionDigits:2, maximumFractionDigits:2})}</div>
                            <div style="font-size:1.1rem;color:#6b7280;margin-top:8px;">This amount will be deducted from your wallet</div>
                        </div>
                    </div>
                </div>`;

                this.modalParts.modalBody.innerHTML = summaryHtml;
                this.stepNumber = 5;
                this.StopButtonLoadingAnimation();
            }

            async SubmitFinal() {
                this.RenderButtonLoadingAnimation(true);
                this.ClearError();

                const finalPayload = {
                    TeacherId: Number(this.teacherId),
                    Governorate: this.groupData.governorate,
                    YearId: Number(this.groupData.yearId),
                    SemesterId: Number(this.groupData.semesterId),
                    CenterId: Number(this.groupData.centerId),
                    SubjectId: Number(this.groupData.subjectId),
                    NumberOfSessions: Number(this.groupData.numberOfSessions),
                    Capacity: Number(this.groupData.capacity),

                    IsGirlsOnly: Boolean(this.groupData.isGirlsOnly),
                    IsPrivate: Boolean(this.groupData.isPrivate),
                    PricePerSession: Number(this.groupData.pricePerSession),

                    Sessions: this.groupData.sessions.map(session => ({
                        RoomId: Number(session.roomId),
                        StartTime: `${session.startTime}:00`,
                        EndTime: `${session.endTime}:00`,
                        StartDate: session.startDate,
                        EndDate: session.endDate,
                        DayId: Number(session.dayId)
                    }))
                };


                // --- API Call ---
                const apiUrl = "/Teachers/Group/ReserveGroupInCenter";

                try {
                    const result = await fetchData(apiUrl, "POST", finalPayload);

                    if (result !== null) {
                        if (result.isValid == true) {
                            this.modalParts.modalBody.innerHTML = `
                            <div class="alert alert-success">
                                <h4><i class="fas fa-check-circle"></i> Success!</h4>
                                <p>The group has been created successfully.</p>
                            </div>`;


                            if (this.modalParts.previousButton) this.modalParts.previousButton.style.display = 'none';
                            if (this.modalParts.nextButton) this.modalParts.nextButton.style.display = 'none';
                            if (this.modalParts.submitButton) this.modalParts.submitButton.style.display = 'none';
                            if (this.modalParts.stepIndex) this.modalParts.stepIndex.style.display = 'none';

                            // Redirect here
                            setTimeout(() => {
                                window.location.href = "/Teachers/Group/Index";
                            }, 2000);
                            showSuccessToast("Success", "Group Created Successfuly!", 3000);

                        } else {
                            this.RenderError("ERROR WHILE SAVING");
                            this.RenderButtonLoadingAnimation(false);
                        }
                    } else {
                        this.RenderError("Submission failed. Could not connect or unknown error. Check console.");
                        this.RenderButtonLoadingAnimation(false);
                    }
                } catch (error) {
                    console.error("Error during final submission API call:", error);
                    this.RenderError(`Submission failed: ${error.message || "An unexpected error."} Check console.`);
                    this.RenderButtonLoadingAnimation(false);
                }
            }

        }

        document.addEventListener('DOMContentLoaded', async () => {
            if (document.getElementById('xmodal-body')) {
                const form = new CreateGroupForm();
                await form.RenderStage01()
            } else {
                console.error("Cannot initialize form: Modal container missing.");
                document.body.innerHTML = "<p style='color: red; font-weight: bold;'>Error: Failed to load group creation form. HTML structure missing.</p>";
            }
        });
    </script>
}