@using XCourse.Core.ViewModels.StudentsViewModels
@using XCourse.Core.ViewModels.TeachersViewModels
@model IEnumerable<GroupVM>;

@{
    ViewData["Title"] = "Groups";
}

@section Styles {
    <style>
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 0.5rem;
        }

            .header .add-btn {
                background-color: var(--clr-primary);
                color: var(--clr-text-on-primary);
                padding: 10px;
                font-size: 1.5rem;
                height: 50px;
                width: 50px;
                border-radius: 50%;
                cursor: pointer;
                outline: none;
                border: none;
            }

        .page-title {
            font-size: 1.5rem;
            color: var(--clr-primary);
            margin-bottom: 1.5rem;
            font-weight: 600;
        }

        .group-card {
            background-color: var(--clr-surface);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            margin-bottom: 20px;
            height: 100%;
        }

            .group-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
            }

        .card-header {
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: 500;
            margin: 0;
            color: var(--clr-text-on-primary);
        }

        .subject-badge {
            background-color: var(--clr-accent);
            color: var(--clr-text-on-accent);
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 0.75rem;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }

        .card-body {
            padding: 16px;
        }

        .group-info {
            margin-bottom: 15px;
        }

        .info-row {
            display: flex;
            align-items: flex-start;
            margin-bottom: 8px;
            font-size: 0.85rem;
        }

        .info-icon {
            color: var(--clr-secondary);
            margin-right: 8px;
            width: 18px;
            text-align: center;
        }

        .info-text {
            color: var(--clr-text-secondary);
            flex: 1;
        }

        .session-days {
            background-color: var(--clr-background);
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 15px;
            height: 125px;
            overflow: auto;
        }

        .session-title {
            font-size: 0.8rem;
            color: var(--clr-text-secondary);
            font-weight: 600;
            margin-bottom: 8px;
        }

        .session-time {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 6px;
            font-size: 0.8rem;
        }

        .day-circle {
            background-color: var(--clr-accent);
            color: var(--clr-text-on-accent);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.7rem;
        }

        .badge {
            background-color: var(--clr-accent);
            color: var(--clr-text-on-accent);
            padding: 4px 8px;
            border-radius: 20px;
            margin-right: 6px;
            font-size: 0.7rem;
            font-weight: 500;
        }

        .badge-online {
            background-color: #28a745;
            color: white;
        }

        .badge-offline {
            background-color: var(--clr-secondary);
            color: white;
        }

        .badge-private {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-girls {
            background-color: #d63384;
            color: white;
        }

        .badge-status {
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
        }

        .students-count {
            margin-top: 12px;
            height: 5px;
            background-color: var(--clr-border);
            border-radius: 3px;
            overflow: hidden;
        }

        .students-progress {
            height: 100%;
            background-color: var(--clr-secondary);
            border-radius: 3px;
        }

        .students-text {
            display: flex;
            justify-content: space-between;
            font-size: 0.75rem;
            margin-top: 4px;
            color: var(--clr-text-secondary);
        }

        .card-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn-all-sessions {
            background-color: var(--clr-secondary);
            color: var(--clr-text-on-secondary);
            border: none;
            border-radius: 6px;
            padding: 8px 16px;
            font-size: 0.85rem;
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            transition: background-color 0.2s ease;
        }

            .btn-all-sessions:hover {
                background-color: #a3634c;
                color: var(--clr-text-on-secondary);
            }

        .btn-details {
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
            border: none;
            border-radius: 6px;
            padding: 8px 16px;
            font-size: 0.85rem;
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            transition: background-color 0.2s ease;
        }

            .btn-details:hover {
                background-color: #4e2257;
                color: var(--clr-text-on-primary);
            }
    </style>

    <!--Modal Styling-->
    <style>
        .btn {
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

            .btn:hover {
                background-color: var(--clr-secondary);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--clr-overlay);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

            .modal-overlay.active {
                opacity: 1;
                pointer-events: all;
            }

        .modal {
            background-color: var(--clr-surface);
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-header {
            padding: 16px 24px;
            background-color: var(--clr-primary);
            color: var(--clr-text-primary);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 20px;
            font-weight: bold;
            color: var(--clr-text-on-primary);
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            color: var(--clr-text-on-primary);
            font-size: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            transition: background-color 0.2s ease;
        }

            .modal-close:hover {
                background-color: rgba(255, 255, 255, 0.2);
            }

        .modal-body {
            padding: 24px;
            max-height: 65vh;
            overflow-y: auto;
        }

        .modal-footer {
            padding: 16px 24px;
            border-top: 1px solid var(--clr-border);
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .btn-secondary {
            background-color: var(--clr-secondary);
            color: var(--clr-text-on-secondary);
        }

        .btn-accent {
            background-color: var(--clr-accent);
            color: var(--clr-text-on-accent);
        }

        .d-none {
            display: none !important;
        }

        /*Cards in the modal Styling*/
        .create-group-card-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .create-group-card {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            background-color: var(--clr-surface);
            padding: 1rem 1.5rem;
            border-radius: 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            text-decoration: none;
            color: inherit;
        }

            .create-group-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
            }

            .create-group-card img {
                width: 64px;
                height: 64px;
                flex-shrink: 0;
            }

        .card-content {
            display: flex;
            flex-direction: column;
        }

            .card-content h1 {
                margin: 0 0 0.4rem;
                font-size: 1.25rem;
                color: var(--clr-primary);
            }

            .card-content p {
                margin: 0;
                font-size: 0.95rem;
                color: var(--clr-text-secondary);
                line-height: 1.4;
            }

        a {
            text-decoration: none;
            color: inherit;
        }

        @@media (max-width: 600px) {
            .create-group-card

        {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
        }

        .card-content h1 {
            font-size: 1.1rem;
        }

        }
    </style>
}

<div class="container">
    <div class="header">
        <h1 class="page-title">Available Groups</h1>
        <button class="add-btn" id="openModalBtn">
            <i class="fa-solid fa-plus"></i>
        </button>
    </div>
    <div class="modal-overlay" id="modalOverlay">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">Create Group</h2>
                <button class="modal-close" id="closeModal">✕</button>
            </div>
            <div class="modal-body">
                <div class="create-group-card-container">
                    <a asp-area="Teachers" asp-controller="Group" asp-action="CreateOnline" class="create-group-card">
                        <img src="~/images/groupTypes/online-class-svgrepo-com.svg" alt="Online Group Icon" />
                        <div class="card-content">
                            <h1>Online Group</h1>
                            <p>
                                Join or create a group for remote learning with flexible schedules and live interactive sessions. Perfect for students across any location.
                            </p>
                        </div>
                    </a>

                    <a asp-area="Teachers" asp-controller="Group" asp-action="CreateOfflineLocal" class="create-group-card">
                        <img src="~/images/groupTypes/building-user-svgrepo-com.svg" alt="Local Group Icon" />
                        <div class="card-content">
                            <h1>Local Group</h1>
                            <p>
                                Collaborate with nearby peers through organized study groups in your neighborhood for a blend of online and in-person sessions.
                            </p>
                        </div>
                    </a>

                    <a asp-area="Teachers" asp-controller="Group" asp-action="CreateOffline" class="create-group-card">
                        <img src="~/images/groupTypes/building-flag-svgrepo-com.svg" alt="Center Group Icon" />
                        <div class="card-content">
                            <h1>Group in Center</h1>
                            <p>
                                Structured sessions held at our educational centers, fully equipped with modern teaching tools and face-to-face learning experiences.
                            </p>
                        </div>
                    </a>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="cancelBtn">
                    Cancel
                </button>
            </div>
        </div>
    </div>
    <div class="row">
        @if (Model != null && Model.Any())
        {
            @foreach (var groupVM in Model)
            {
                <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
                    <div class="group-card">
                        <div class="card-header">
                            @if (groupVM.Subject != null)
                            {
                                <h5 class="card-title">@groupVM.Subject.Topic</h5>
                                <span class="subject-badge">
                                    <i class="fas fa-book"></i>
                                    @switch ((int)(groupVM.Subject.Year))
                                    {
                                        case 0:
                                            <span>Primary One</span>
                                            break;
                                        case 1:
                                            <span>Primary Two</span>
                                            break;
                                        case 2:
                                            <span>Primary Three</span>
                                            break;
                                        case 3:
                                            <span>Primary Four</span>
                                            break;
                                        case 4:
                                            <span>Primary Five</span>
                                            break;
                                        case 5:
                                            <span>Primary Six</span>
                                            break;
                                        case 6:
                                            <span>Preparatory One</span>
                                            break;
                                        case 7:
                                            <span>Preparatory Two</span>
                                            break;
                                        case 8:
                                            <span>Preparatory Three</span>
                                            break;
                                        case 9:
                                            <span>Secondary One</span>
                                            break;
                                        case 10:
                                            <span>Secondary Two</span>
                                            break;
                                        case 11:
                                            <span>Secondary Three</span>
                                            break;
                                        default:
                                            <span>Unknown Grade</span>
                                            break;
                                    }
                                </span>
                            }
                            else
                            {
                                <h5 class="card-title">Unnamed Group</h5>
                                <span class="subject-badge">Unknown Grade</span>
                            }
                        </div>
                        <div class="card-body">
                            <div class="d-flex flex-wrap mb-2">
                                <span class="badge @(groupVM.IsOnline ? "badge-online" : "badge-offline")">
                                    <i class="fas @(groupVM.IsOnline ? "fa-globe" : "fa-building")"></i>
                                    @(groupVM.IsOnline ? "Online" : "Offline")
                                </span>
                                <span class="badge @(groupVM.IsGirlsOnly ? "badge-girls" : "badge-status")">
                                    <i class="fas @(groupVM.IsGirlsOnly ? "fa-female" : "fa-users")"></i>
                                    @(groupVM.IsGirlsOnly ? "Girls Only" : "Mixed")
                                </span>
                                @if (groupVM.Subject != null)
                                {
                                    <span class="badge badge-private">
                                        <i class="fas fa-calendar-alt"></i>
                                        @switch ((int)groupVM.Subject.Semester)
                                        {
                                            case 1:
                                                <span>First Semester</span>
                                                break;
                                            case 2:
                                                <span>Second Semester</span>
                                                break;
                                            case 3:
                                                <span>Full Year</span>
                                                break;
                                            default:
                                                <span>Unknown</span>
                                                break;
                                        }
                                    </span>
                                }
                            </div>

                            <div class="group-info">
                                <div class="info-row">
                                    <span class="info-icon">
                                        <i class="fas fa-map-marker-alt"></i>
                                    </span>
                                    <span class="info-text">
                                        @if (!string.IsNullOrEmpty(groupVM.CenterName))
                                        {
                                            @groupVM.CenterName
                                        }
                                        else if (groupVM.Address != null)
                                        {
                                            <span>
                                                @(!string.IsNullOrEmpty(groupVM.Address.Governorate) ? groupVM.Address.Governorate + ", " : "")
                                                @(!string.IsNullOrEmpty(groupVM.Address.City) ? groupVM.Address.City + ", " : "")
                                                @(groupVM.Address.Street ?? "")
                                            </span>
                                        }
                                        else
                                        {
                                            <span>Location not available</span>
                                        }
                                    </span>
                                </div>
                            </div>

                            <div class="session-days">
                                <div class="session-title">Session Schedule</div>
                                @if (groupVM.Sessions != null && groupVM.Sessions.Any())
                                {
                                    @foreach (var session in groupVM.Sessions)
                                    {
                                        <div class="session-time">
                                            <div class="day-circle">
                                                @(session?.WeekDay?.ToString().Substring(0, 3).ToUpper())
                                            </div>
                                            <div>@session?.StartTime - @session?.EndTime</div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div>No scheduled sessions</div>
                                }
                            </div>

                            <div>
                                <div class="students-count">
                                    @{
                                        var percentFilled = groupVM.Capacity > 0 ?
                                        (groupVM.NumberOfStudent * 100 / groupVM.Capacity) : 0;
                                    }
                                    <div class="students-progress" style="width: @percentFilled%"></div>
                                </div>
                                <div class="students-text">
                                    <span>Students</span>
                                    <span>@groupVM.NumberOfStudent / @groupVM.Capacity</span>
                                </div>
                            </div>

                            <div class="card-actions">
                                <a asp-controller="Sessions" asp-route-id="@groupVM.GroupID" asp-action="GroupSessions" class="btn-all-sessions">
                                    <i class="fas fa-clipboard-list"></i>
                                    Sessions
                                </a>
                                <a asp-action="Details" asp-route-id="@groupVM.GroupID" class="btn-details">
                                    <i class="fas fa-info-circle"></i>
                                    Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info">
                    No groups are currently available.
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
                    // DOM Elements
        const openModalBtn = document.getElementById('openModalBtn');
        const modalOverlay = document.getElementById('modalOverlay');
        const closeModalBtn = document.getElementById('closeModal');
        const cancelBtn = document.getElementById('cancelBtn');



        // Modal functionality
        openModalBtn.addEventListener('click', () => {
            modalOverlay.classList.add('active');
        });

        const closeModal = () => {
            modalOverlay.classList.remove('active');
        };

        closeModalBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);

        // Close modal when clicking on overlay
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                closeModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modalOverlay.classList.contains('active')) {
                closeModal();
            }
        });
    </script>
}