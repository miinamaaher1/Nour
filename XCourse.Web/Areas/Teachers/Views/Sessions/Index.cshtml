@using XCourse.Core.ViewModels.TeachersViewModels
@model List<TeacherSessionVM>

@{
    ViewData["Title"] = "My Sessions";
}

@section Styles {
    <link rel="stylesheet" href="~/Content/tui-calendar/tui-calendar.min.css">

    <!--Search styling-->
    <style>
        .search {
            padding: 10px 35px 10px 15px; /* Add padding for text and icon space */
            border: 1px solid var(--clr-border);
            border-radius: 25px;
            font-size: 1rem;
            color: var(--clr-text-primary);
            background-color: var(--clr-surface);
            width: 100%; /* Make it take full width of its container */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
            transition: border-color 0.3s ease; /* Smooth transition for focus state */
        }

            .search::placeholder {
                color: var(--clr-text-secondary);
            }

            .search:focus {
                outline: none; /* Remove default focus outline */
                border-color: var(--clr-primary); /* Change border color on focus */
            }

        /* Styling for the container to hold the input and the icon */
        .search-container {
            position: relative;
            margin: 15px auto;
        }

            .search-container i, .search-container svg { /* Style the Font Awesome icon */
                position: absolute;
                top: 50%;
                right: 15px; /* Adjust as needed */
                transform: translateY(-50%);
                color: var(--clr-text-secondary);
                font-size: 1.2rem; /* Adjust icon size */
                cursor: pointer;
            }

        .calendar-container {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
        }

        .empty-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: var(--clr-secondary);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }

        .btn-calendar-view {
            background-color: white;
            color: var(--primary-color);
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            margin-left: 5px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

            .btn-calendar-view:hover, .btn-calendar-view.active {
                background-color: var(--clr-accent);
            }

            .btn-calendar-view i {
                margin-right: 5px;
            }

        /* Calendar customization */
        #calendar .tui-full-calendar-month-week-item {
            border-radius: 4px;
            overflow: hidden;
        }

        #calendar .tui-full-calendar-weekday-grid-line {
            border-color: #edf2f7;
        }

            #calendar .tui-full-calendar-weekday-grid-line:hover {
                background-color: #f8fafc;
            }

        #calendar .tui-full-calendar-month-week-item {
            cursor: pointer;
        }

        #calendar .tui-full-calendar-month-more-button {
            background-color: var(--primary-color);
            color: white;
            border-radius: 4px;
        }

        /* Custom template styles */
        .session-template {
            padding: 4px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            font-size: 12px;
            font-weight: 500;
            overflow: hidden;
        }

            .session-template .session-icon {
                margin-right: 4px;
                width: 16px;
                height: 16px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
            }

            .session-template .session-title {
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

        .online-session {
            background-color: rgba(19, 194, 150, 0.15);
            border-left: 3px solid var(--online-color);
        }

            .online-session .session-icon {
                background-color: var(--online-color);
                color: var(--clr-primary);
            }

        .offline-session {
            background-color: rgba(74, 108, 247, 0.15);
            border-left: 3px solid var(--offline-color);
        }

            .offline-session .session-icon {
                background-color: var(--offline-color);
                color: var(--clr-accent);
            }

        /* Popup styles */
        .tui-full-calendar-popup-container {
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15) !important;
            border-radius: 10px !important;
            overflow: hidden !important;
        }

        .tui-full-calendar-popup-section-item {
            padding: 8px 0 !important;
        }

        .tui-full-calendar-popup-section-title {
            font-weight: 600 !important;
        }

        .tui-full-calendar-section-button {
            background-color: var(--primary-color) !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
        }

        /* Calendar Controls Styling */
        .calendar-controls {
            padding: 10px 20px;
            background-color: var(--clr-surface);
            border-bottom: 1px solid var(--clr-border);
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
            height: 60px; /* Fixed height for controls */
            box-sizing: border-box;
        }

            .calendar-controls button {
                background-color: var(--clr-primary);
                color: var(--clr-text-on-primary);
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .calendar-controls button:hover {
                    background-color: var(--clr-secondary);
                }

        #current-range {
            font-weight: bold;
            color: var(--clr-primary);
        }

        /* Calendar Container */
        #calendar {
            height: calc(100vh - 120px); /* Adjust height based on controls */
            border: 1px solid var(--clr-border);
            position: relative;
        }

        /* Teacher specific styles */
        .session-info {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
        }

        .session-badge {
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: bold;
            margin-right: 5px;
        }

        .year-badge {
            background-color: #e2e8f0;
            color: #4a5568;
        }

        .semester-badge {
            background-color: #edf2f7;
            color: #4a5568;
        }

        .btn {
            display: inline-block;
			margin-top: 10px;
            padding: 2px 15px;
            font-size: 1rem;
            font-weight: 500;
            text-align: center;
            text-decoration: none;
            cursor: pointer;
            border-radius: 0.375rem; /* Rounded corners */
            transition: all 0.3s ease;
            border: 2px solid transparent;
            background-color: transparent;
        }

        .btn-outline-info {
            color: #0dcaf0; /* Bootstrap "info" color */
            border-color: #0dcaf0;
            background-color: transparent;
        }

            .btn-outline-info:hover {
                background-color: #0dcaf0;
                color: white;
            }

        .popup_btn {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 10px;
        }

        /* Add missing header-date-display style */
        .header-date-display {
            font-size: 16px;
            margin-left: 8px;
        }

    </style>
}

<div class="container">
    <div class="col-12 row">
        <div class="col-3"></div>
        <div class="col-lg-6 col-12">
            <div class="search-container">
                <input class="search" id="sessionSearch" placeholder="Search sessions..." />
                <i class="fas fa-search"></i>
            </div>
        </div>
        <div class="col-3"></div>
    </div>
    <!-- Calendar view -->
    <div class="card shadow-sm border-0 overflow-hidden">
        <div class="container">
            <div class="calendar-controls">
                <button id="prevBtn"><i class="fas fa-chevron-left"></i></button>
                <button id="nextBtn"><i class="fas fa-chevron-right"></i></button>
                <button id="todayBtn">Today</button>
                <span id="current-range"></span>
                <div style="margin-left: auto;">
                    <button id="dayView" class="btn-calendar-view">Day</button>
                    <button id="weekView" class="btn-calendar-view">Week</button>
                    <button id="monthView" class="btn-calendar-view active">Month</button>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="container">
                <div>
                    <div class="calendar-container">
                        <div id="calendar" style="height: 650px;"></div>    @*Calendar*@
                        <div id="emptyMessage" class="empty-message" style="display: none;">
                            <h4><i class="fas fa-search text-primary" style="font-size: 2rem;"></i></h4>
                            <h4>No sessions match your search</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="@Url.Content("~/Scripts/tui-code-snippet.min.js")"></script>
    <script src="@Url.Content("~/Scripts/tui-calendar.min.js")"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Template functions
            function getMonthEventTemplate(event) {
                var isOnline = event.raw.isOnline === 'true';
                var iconClass = isOnline ? 'fa-wifi' : 'fa-building';
                var sessionClass = isOnline ? 'online-session' : 'offline-session';

                return '<div class="session-template ' + sessionClass + '">' +
                    '<div class="session-icon"><i class="fas ' + iconClass + '" style="font-size: 8px;"></i></div>' +
                    '<div class="session-title">' + event.title +
                    '<div class="session-info mt-1">' +
                    '<span class="session-badge year-badge">Y' + event.raw.year + '</span>' +
                    '<span class="session-badge semester-badge">S' + event.raw.semester + '</span>' +
                    '</div>' +
                    '</div>' +
                    '</div>';
            }

            function getWeekEventTemplate(event) {
                var isOnline = event.raw.isOnline === 'true';
                var iconClass = isOnline ? 'fa-wifi' : 'fa-building';
                var sessionClass = isOnline ? 'online-session' : 'offline-session';

                return '<div class="session-template ' + sessionClass + '" style="height: 100%;">' +
                    '<div class="session-icon"><i class="fas ' + iconClass + '" style="font-size: 8px;"></i></div>' +
                    '<div class="session-title">' + event.title + '</div>' +
                    '</div>';
            }

        function getPopupDetailTemplate(event) {
            var isOnline = event.raw.isOnline === 'true';
            var iconClass = isOnline ? 'fa-wifi' : 'fa-building';
            var locationText = isOnline ? 'Online Session' : 'Offline Session: ' + event.raw.centerName;
            var locationColor = isOnline ? '#248a6b' : '#15479e';

            var start = new Date(event.start);
            var end = new Date(event.end);

            var formattedDate = start.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            var formattedStartTime = start.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });

            var formattedEndTime = end.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });

            // Only show these fields for offline sessions
            var offlineInfo = '';
            if (!isOnline) {
                // Room info
                if (event.raw.roomName !== 'UnKnown') {
                    offlineInfo += '<div class="mb-2"><i class="fas fa-door-open me-2"></i> <strong>Room:</strong> ' + event.raw.roomName + '</div>';
                }

                // Center info
                if (event.raw.centerName !== 'UnKnown') {
                    offlineInfo += '<div class="mb-2"><i class="fas fa-building me-2"></i> <strong>Center:</strong> ' + event.raw.centerName + '</div>';
                }

                // Address info
                if (event.raw.address) {
                    offlineInfo += '<div class="mb-2"><i class="fas fa-map-marker-alt me-2"></i> <strong>Address:</strong> ' + event.raw.address + '</div>';
                }
            }

            // Subject year and semester badges
            var academicInfo = `<div class="mb-2">
                     <span class="session-badge year-badge">${event.raw.year} Year</span>
                    <span class="session-badge semester-badge"> ${event.raw.semester} Semester</span></div>`;

            return `
                    <div class="p-3" style="color:black;">
                        <h4 class="mb-3">${event.title}</h4>
                        ${academicInfo}
                        <div class="mb-2"><i class="fas fa-calendar-day me-2"></i> <strong>Date:</strong> ${formattedDate}</div>
                        <div class="mb-2"><i class="fas fa-clock me-2"></i> <strong>Time:</strong> ${formattedStartTime} - ${formattedEndTime}</div>
                        <div class="mb-2"><i class="fas fa-hourglass-half me-2"></i> <strong>Duration:</strong> ${event.raw.duration}</div>
                        ${offlineInfo}
                        <div class="mt-3 pt-2 border-top">
                            <span style="color: ${locationColor};">
                                <i class="fas ${iconClass} me-2"></i> ${locationText}
                            </span>
                            <div class="popup_btn">
                                <a href="/Teacher/Session/Details/${event.id}" class="btn btn-outline-info">Details</a>
                            </div>
                        </div>
                    </div>
                `;
        }
            // Initialize calendar
            var calendar = new tui.Calendar("#calendar", {
                defaultView: "month",
                taskView: false,
                useDetailPopup: true,
                isReadOnly: true,
                usageStatistics: false,
                month: {
                    daynames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    startDayOfWeek: 0,
                    narrowWeekend: false
                },
                week: {
                    daynames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    hourStart: 8,
                    hourEnd: 20
                },
                template: {
                    monthDayname: function(dayname) {
                        return '<span class="fw-bold">' + dayname.label + '</span>';
                    },
                    monthGridHeader: function(model) {
                        var date = new Date(model.date);
                        return '<span class="tui-full-calendar-weekday-grid-date">' + date.getDate() + '</span>';
                    },
                    monthMoreTitleDate: function(date) {
                        var day = date.split('-')[2];
                        return '<span class="fw-bold">' + day + '</span> more';
                    },
                    monthMoreClose: function() {
                        return '<i class="fas fa-times"></i>';
                    },
                    monthGridHeaderExceed: function(hiddenEvents) {
                        return '<span class="badge bg-primary rounded-pill">+' + hiddenEvents + '</span>';
                    },
                    monthDayname: function(model) {
                        return (
                            '<span class="tui-full-calendar-dayname-name">' + model.label + '</span>'
                        );
                    },
                    weekDayname: function(model) {
                        return '<span class="tui-full-calendar-dayname-name">' + model.dayName + '</span>';
                    },
                    timegridDisplayPrimaryTime: function(time) {
                        return time.hour + ':00';
                    },
                    timegridCurrentTime: function(timezone) {
                        var templates = [];
                        var date = new Date();

                        templates.push('<div class="tui-full-calendar-timegrid-timezone">');
                        templates.push(date.getHours() + ':' + date.getMinutes());
                        templates.push('</div>');

                        return templates.join('');
                    },
                    popupDetailBody: function(schedule) {
                        return getPopupDetailTemplate(schedule);
                    },
                    // Custom event templates
                    time: function(event) {
                        return getWeekEventTemplate(event);
                    },
                    allday: function(event) {
                        return getMonthEventTemplate(event);
                    },
                    schedule: function(event) {
                        return getMonthEventTemplate(event);
                    }
                }
            });

            // Store all session data
            const allSessions = [];
        const centers = new Set();

        // Process session data from the model
        @foreach (var session in Model)
        {
            <text>
                    const startDateTime_@(session.ID) = new Date('@session.StartDateTime.ToString("yyyy-MM-ddTHH:mm:ss")');
                    let endDateTime_@(session.ID);

                @if (session.Duration != null)
                {
                    <text>
                                // Parse duration and add to start time
                                const durationParts_@(session.ID) = '@session.Duration?.ToString(@"hh\:mm")'.split(':');
                                const hours_@(session.ID) = parseInt(durationParts_@(session.ID)[0]);
                                const minutes_@(session.ID) = parseInt(durationParts_@(session.ID)[1]);

                                endDateTime_@(session.ID) = new Date(startDateTime_@(session.ID));
                                endDateTime_@(session.ID).setHours(endDateTime_@(session.ID).getHours() + hours_@(session.ID));
                                endDateTime_@(session.ID).setMinutes(endDateTime_@(session.ID).getMinutes() + minutes_@(session.ID));
                    </text>
                }
                else
                {
                    <text>
                                // Default to 1 hour if duration is not provided
                                endDateTime_@(session.ID) = new Date(startDateTime_@(session.ID));
                                endDateTime_@(session.ID).setHours(endDateTime_@(session.ID).getHours() + 1);
                    </text>
                }

                    // Add center to list of centers if not already exists
                @if (!string.IsNullOrEmpty(session.CenterName) && session.CenterName != "UnKnown")
                {
                    <text>centers.add('@session.CenterName');</text>
                }

                    // Store session data for searching
                    allSessions.push({
                        id: '@session.ID',
                        calendarId: '@(session.IsOnline ? "online" : "offline")',
                        title: '@session.Subject',
                        body: 'Year: @session.Year, Semester: @session.Semester',
                        category: 'time',
                        start: startDateTime_@(session.ID),
                        end: endDateTime_@(session.ID),
                        isReadOnly: true,
                        raw: {
                            centerName: '@session.CenterName',
                            roomName: '@session.RoomName',
                            isOnline: @(session.IsOnline ? "true" : "false").toString(),
                            location: '@(session.IsOnline ? "Online" : session.Address.Street?? session.CenterName)',
                            duration: '@(session.Duration?.ToString(@"hh\:mm") ?? "01:00")',
                            year: '@session.Year',
                            semester: '@session.Semester'
                        }
                    });
            </text>
        }

        // Set calendar color categories
        calendar.setCalendarColor('online', {
            backgroundColor: 'rgba(19, 194, 150, 0.05)',
            borderColor: '#13c296',
            dragBackgroundColor: '#13c296',
            color: '#212b36'
        });

        calendar.setCalendarColor('offline', {
            backgroundColor: 'rgba(74, 108, 247, 0.05)',
            borderColor: '#4a6cf7',
            dragBackgroundColor: '#4a6cf7',
            color: '#212b36'
        });

        // Add all sessions to calendar
        calendar.createSchedules(allSessions);

        // Update header date display
        function updateDateRangeDisplay() {
            const currentDate = calendar.getDate();
            const currentView = calendar.getViewName();

            let dateRangeText = '';

            if (currentView === 'month') {
                dateRangeText = currentDate.toLocaleString('en-US', { month: 'long', year: 'numeric' });
            } else if (currentView === 'week') {
                const weekStart = new Date(currentDate);
                weekStart.setDate(currentDate.getDate() - currentDate.getDay());

                const weekEnd = new Date(weekStart);
                weekEnd.setDate(weekStart.getDate() + 6);

                dateRangeText = weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) +
                                ' - ' +
                                weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            } else if (currentView === 'day') {
                dateRangeText = currentDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric'
                });
            }

            // Create or update the date display in the header
            let headerDateDisplay = document.querySelector('.header-date-display');

            if (!headerDateDisplay) {
                headerDateDisplay = document.createElement('div');
                headerDateDisplay.className = 'header-date-display text-white ms-3';
                document.querySelector('.calendar-header h4').after(headerDateDisplay);
            }

            headerDateDisplay.textContent = dateRangeText;
        }

        // Function to handle search filtering
                function handleSearch() {
            const searchQuery = document.getElementById('sessionSearch').value.toLowerCase();
            let filteredSessions = [];

            if (searchQuery === '') {
                // If search is empty, show all sessions
                filteredSessions = allSessions;
                document.getElementById('emptyMessage').style.display = 'none';
            } else {
                // Filter sessions based on search query
                filteredSessions = allSessions.filter(session => {
                    const titleMatch = session.title.toLowerCase().includes(searchQuery);
                    const centerMatch = session.raw.centerName.toLowerCase().includes(searchQuery);
                    const roomMatch = session.raw.roomName.toLowerCase().includes(searchQuery);
                    const locationMatch = session.raw.location.toLowerCase().includes(searchQuery);
                    const yearMatch = session.raw.year.toString().includes(searchQuery);
                    const semesterMatch = session.raw.semester.toString().includes(searchQuery);

                    return titleMatch || centerMatch || roomMatch || locationMatch || yearMatch || semesterMatch;
                });

                // Show/hide empty message
                if (filteredSessions.length === 0) {
                    document.getElementById('emptyMessage').style.display = 'block';
                } else {
                    document.getElementById('emptyMessage').style.display = 'none';
                }
            }

            // Clear calendar and add filtered sessions
            calendar.clear();
            calendar.createSchedules(filteredSessions);
            calendar.render();
        }

        // Set up search handler
        document.getElementById('sessionSearch').addEventListener('keyup', handleSearch);

        // Set up calendar view controls
        document.getElementById('monthView').addEventListener('click', function() {
            setActiveViewButton(this);
            calendar.changeView('month');
            updateDateRangeDisplay();
        });

        document.getElementById('weekView').addEventListener('click', function() {
            setActiveViewButton(this);
            calendar.changeView('week');
            updateDateRangeDisplay();
        });

        document.getElementById('dayView').addEventListener('click', function() {
            setActiveViewButton(this);
            calendar.changeView('day');
            updateDateRangeDisplay();
        });

        document.getElementById('todayBtn').addEventListener('click', function() {
            calendar.today();
            updateDateRangeDisplay();
        });

        document.getElementById('prevBtn').addEventListener('click', function() {
            calendar.prev();
            updateDateRangeDisplay();
        });

        document.getElementById('nextBtn').addEventListener('click', function() {
            calendar.next();
            updateDateRangeDisplay();
        });

        function setActiveViewButton(button) {
            document.querySelectorAll('.btn-calendar-view').forEach(btn => {
                btn.classList.remove('active');
            });
            button.classList.add('active');
        }

        // Initialize date display
        updateDateRangeDisplay();
    });
</script>
}