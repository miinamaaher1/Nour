@using XCourse.Core.DTOs.StudentDTOs
@model CenterVM

@{
	ViewData["Title"] = $"{Model.Name}";
}

<div class="col-12">

	<!-- Center Information Section -->
	<section class="center animate-fade-in">
		<div class="container">
			<div class="center__card">
				<div class="row g-0">
					<div class="col-md-6">
						@if (Model.PreviewPicture != null)
						{
							<img alt="cover" class="center__image"
								 src="data:image/*;base64,@(Convert.ToBase64String(Model.PreviewPicture))" />
						}
						else
						{
							<img alt="cover" class="center__image"
								 src="~/images/default_center.svg" />
						}
					</div>
					<div class="col-md-6">
						<div class="center__info">
							<h2 class="center__name">@Model.Name</h2>
							<div class="center__location">
								<i class="fas fa-map-marker-alt"></i>&nbsp;
								<span>@Model.Street St. @Model.City City, @Model.Governorate</span>
							</div>
							<p>
								Welcome to our premium conference center – a perfect blend of luxury and functionality.
								With state-of-the-art facilities and a prime location, we offer the ideal setting for your next event.
							</p>
							<div class="center__map">
								@if (Model.Location != null)
								{
									<partial name="_MapPartialView" model="new MapInfoDTO() { Key=Model.MapKey, OriginX=Model.Location.X, OriginY=Model.Location.Y }" style="width:100%; height:100%" />
								}
								else
								{
									<i class="fa-solid fa-map-location-dot"></i>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Rooms Section -->
	<section class="rooms">
		<div class="container">
			<h2 class="rooms__heading">Available Rooms</h2>

			<!-- Rooms Grid -->
			<div class="row">

				@foreach (var room in Model.AvailbleRooms)
				{
					<!-- Room Card 1 -->
					<div class="col-lg-4 col-md-6 mb-4 animate-fade-in" style="animation-delay: 0.1s;">
						<div class="rooms__card">
							@if (room.PreviewPicture != null)
							{
								<img alt="profile" class="rooms__image"
									 src="data:image/*;base64,@(Convert.ToBase64String(room.PreviewPicture))" />
							}
							else
							{
								<img alt="profile" class="rooms__image"
									 src="~/images/default_room.svg" />
							}
							<div class="rooms__info">
								<h3 class="rooms__name">@room.Name</h3>
								<div class="rooms__details">
									<div class="rooms__capacity">
										<i class="fas fa-users"></i>&nbsp;
										<span>Capacity: @room.Capacity people</span>
									</div>
									<div class="rooms__price">
										<i class="fas fa-tag"></i>&nbsp;
										<span>L.E. @room.PricePerHour per hour</span>
									</div>
									<div class="group-card__features">
										@if (room.Equipment.HasFlag(Equipment.Study))
										{
											<span class="group-card__feature">
												<i class="fa-solid fa-graduation-cap"></i>&nbsp;Study Room
											</span>
										}
										@if (room.Equipment.HasFlag(Equipment.Meeting))
										{
											<span class="group-card__feature">
												<i class="fa-solid fa-handshake-simple"></i>&nbsp;Meeting Room
											</span>
										}
									</div>
									<p>
										A luxurious executive suite with state-of-the-art presentation equipment and elegant furnishings.
									</p>
								</div>
								<button class="btn rooms__reserve-btn" onclick="openModal(@room.ID, @room.PricePerHour)">
									<i class="fas fa-calendar-check"></i>&nbsp;Reserve Now
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</section>
</div>

<div id="xmodal-container" class="d-none">
	<div class="xmodal-overlay">
		<div class="xmodal">
			<div class="xmodal-header">
				<h2>Book A Room</h2>
			</div>
			<div class="xmodal-body">
				<div class="day-picker">
					<div class="arrow" id="left-arrow"><i class="fa-solid fa-caret-left"></i></div>
					<div class="date-display" id="date-display"></div>
					<div class="arrow" id="right-arrow"><i class="fa-solid fa-caret-right"></i></div>
				</div>
				<svg id="clock" width="300" height="300" viewBox="0 0 300 300">
					<defs>
						<filter id="dropShadow" x="-50%" y="-50%" width="200%" height="200%">
							<feDropShadow dx="1" dy="1" stdDeviation="5" flood-color="var(--clr-overlay)" />
						</filter>
					</defs>
					<circle id="watch-face" cx="150" cy="150" r="150" fill="var(--clr-primary)" />
					<g id="hourMarks"></g>
					<g id="reservedArcs" filter="url(#dropShadow)"></g>
					<!-- Start and End handles -->
					<circle id="startHandle" class="handle" r="10" fill="var(--clr-accent)" style="display:none"
							filter="url(#dropShadow)" />
					<circle id="endHandle" class="handle" r="10" fill="var(--clr-accent)" style="display:none"
							filter="url(#dropShadow)" />
				</svg>
				<div id="loading" class="d-flex align-items-center justify-content-center d-none">
					<div class="rotating-dots">
						<div class="dot"></div>
						<div class="dot"></div>
						<div class="dot"></div>
						<div class="dot"></div>
					</div>
				</div>
				<p id="tell-time">
					From: <span id="startTimeText">--:--</span> To: <span id="endTimeText">--:--</span>
				</p>

			</div>
			<div class="xmodal-footer">
				<div class="form-group">
					<button id="close-modal" class="btn btn-close">Cancel</button>
					<button onclick="resetSelection()" class="btn btn-secondary">Reset</button>
					<button id="am-pm" onclick="toggleAM()" class="btn btn-secondary">AM</button>
					<button id="submit-request" class="btn btn-primary">Submit</button>
				</div>
			</div>
		</div>
	</div>
</div>

<div id="ymodal-container" class="d-none">
	<div class="xmodal-overlay">
		<div class="xmodal">
			<div class="xmodal-header">
				<h2>Confirm Reservation</h2>
			</div>
			<div class="xmodal-body" id="confirm-body">

			</div>
			<div class="xmodal-footer">
				<div class="form-group">
					<button id="close-confirm" class="btn btn-close">Cancel</button>
					<button id="confirm-request" class="btn btn-primary">Confirm</button>
				</div>
			</div>
		</div>
	</div>
</div>

@section Styles {
	<style>

		:root {
			/* Borders & Shadows */
			--border-radius: 12px;
			--shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.05);
			--shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);
			--shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.12);
		}


		@@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translateY(20px);
			}

			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.animate-fade-in {
			animation: fadeIn 0.8s ease forwards;
		}


		.center {
			padding: 2rem 0;
		}

		.center__card {
			background-color: var(--clr-surface);
			border-radius: var(--border-radius);
			overflow: hidden;
			box-shadow: var(--shadow-md);
			transition: transform 0.3s, box-shadow 0.3s;
		}

			.center__card:hover {
				transform: translateY(-5px);
				box-shadow: var(--shadow-lg);
			}

		.center__image {
			width: 100%;
			height: 100%;
			object-fit: cover;
			border-bottom: 2px solid var(--clr-accent);
		}

		.center__info {
			padding: 2rem;
		}

		.center__name {
			color: var(--clr-primary);
			font-size: 2.2rem;
			margin-bottom: 0.5rem;
			font-family: var(--font-heading);
		}

		.center__location {
			display: flex;
			align-items: center;
			color: var(--clr-text-secondary);
			margin-bottom: 1rem;
		}

		.center__location i {
			margin-right: 0.5rem;
			color: var(--clr-accent);
		}

		.center__map {
			height: 300px;
			border-radius: var(--border-radius);
			overflow: hidden;
			box-shadow: var(--shadow-sm);
			border: 2px solid var(--clr-border);
		}

		.rooms {
			padding: 2rem 0;
		}

		.rooms__heading {
			position: relative;
			margin-bottom: 2rem;
			display: inline-block;
			font-family: var(--font-heading);
			font-size: 2rem;
			color: var(--clr-primary);
		}

		.rooms__heading::after {
			content: '';
			position: absolute;
			bottom: -8px;
			left: 0;
			width: 80px;
			height: 3px;
			background-color: var(--clr-accent);
		}

		.rooms__card {
			background-color: var(--clr-surface);
			border-radius: var(--border-radius);
			overflow: hidden;
			box-shadow: var(--shadow-md);
			margin-bottom: 2rem;
			transition: transform 0.3s, box-shadow 0.3s;
			border: 1px solid var(--clr-border);
			display: flex;
			flex-direction: column;
		}

		.rooms__card:hover {
			transform: translateY(-5px);
			box-shadow: var(--shadow-lg);
		}

		.rooms__image {
			width: 100%;
			height: 180px;
			object-fit: cover;
		}

		.rooms__info {
			padding: 1rem;
			flex-grow: 1;
			display: flex;
			flex-direction: column;
		}

		.rooms__name {
			font-size: 1.5rem;
			color: var(--clr-primary);
			margin-bottom: 0.5rem;
			font-family: var(--font-heading);
		}

		.rooms__details {
			flex-grow: 1;
		}

		.rooms__capacity,
		.rooms__price {
			display: flex;
			align-items: center;
			margin-bottom: 0.5rem;
			color: var(--clr-text-secondary);
		}

		.rooms__capacity i,
		.rooms__price i {
			margin-right: 0.5rem;
			color: var(--clr-accent);
			width: 20px;
			text-align: center;
		}

		.rooms__reserve-btn {
			background-color: var(--clr-primary);
			color: var(--clr-text-on-primary);
			border: none;
			padding: 10px 20px;
			border-radius: var(--border-radius);
			font-weight: 600;
			transition: background-color 0.3s, transform 0.2s;
			display: flex;
			align-items: center;
			justify-content: center;
			width: 100%;
		}

		.rooms__reserve-btn i {
			margin-right: 0.5rem;
		}

		.rooms__reserve-btn:hover {
			background-color: var(--clr-secondary);
			transform: scale(1.03);
		}

		@@media (max-width: 768px) {
			.center__name {
				font-size: 1.8rem;
			}

			.center__image {
				height: 200px;
			}

			.center__map {
				height: 200px;
				margin-top: 1rem;
			}
		}

		@@media (max-width: 576px) {
			.rooms__card {
				margin-bottom: 1rem;
			}

			.center__info {
				padding: 1rem;
			}
		}

		.rooms__tags {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
			margin-bottom: 1rem;
		}

		.rooms__tag {
			background-color: var(--clr-accent);
			color: var(--clr-text-on-accent);
			padding: 4px 10px;
			border-radius: 20px;
			font-size: 0.8rem;
			font-weight: 600;
			text-transform: uppercase;
			letter-spacing: 0.5px;
		}

		/* Element - Group Card Features */
		.group-card__features {
			display: flex;
			flex-wrap: wrap;
			gap: 10px;
			margin-bottom: 15px;
		}

		.group-card__feature {
			display: flex;
			align-items: center;
			background-color: var(--clr-accent);
			color: var(--clr-text-on-accent);
			font-size: 0.85rem;
			padding: 5px 10px;
			border-radius: 20px;
		}

		.group-card__feature i {
			margin-right: 5px;
		}

		#xmodal-container {
			position: fixed;
			top: 0;
			left: 0;
			bottom: 0;
			right: 0;
			z-index: 1000;
		}

		#ymodal-container {
			position: fixed;
			top: 0;
			left: 0;
			bottom: 0;
			right: 0;
			z-index: 1000;
		}

		.xmodal-overlay {
			position: fixed;
			top: 0;
			left: 0;
			bottom: 0;
			right: 0;
			background: var(--clr-overlay);
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.xmodal {
			background: var(--clr-background);
			width: 400px;
			border-radius: 10px;
			box-shadow: 0 4px 10px var(--clr-overlay);
			overflow: hidden;
		}

		.xmodal-header {
			background: var(--clr-primary);
			color: var(--clr-background);
			padding: 15px;
			font-size: 18px;
			text-align: center;
		}

		.xmodal-body {
			padding: 20px;
			text-align: center;
		}

		.xmodal-footer {
			background: var(--clr-surface);
			padding: 15px;
			text-align: center;
		}

		.day-picker {
			margin: auto;
			display: flex;
			align-items: center;
			justify-content: space-between;
			border-radius: 10px;
			background-color: var(--clr-surface);
			box-shadow: 0 0 15px var(--clr-overlay);
			width: 300px;
			height: 60px;
			overflow: hidden;
		}

		.arrow {
			cursor: pointer;
			font-size: 24px;
			width: 60px;
			height: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
			background-color: var(--clr-primary);
			color: var(--clr-text-on-primary);
			user-select: none;
			transition: background-color 0.3s;
		}

		.arrow:hover {
			opacity: 0.9;
		}

		.arrow:active {
			opacity: 0.7;
		}

		.date-display {
			font-size: 18px;
			font-weight: bold;
			color: var(--clr-text-primary);
			text-align: center;
			flex-grow: 1;
			display: flex;
			justify-content: center;
			align-items: center;
			background-color: var(--clr-surface);
		}

		#clock {
			margin-top: 20px;
			background: white;
			border-radius: 50%;
			box-shadow: 0 0 15px var(--clr-overlay);
		}

		#loading {
			margin: 0 auto;
			margin-top: 20px;
			width: 300px;
			height: 300px;
		}

		circle.handle {
			cursor: pointer;
		}

		text.hour-mark {
			font-size: 27px;
			font-weight: 1000;
			fill: var(--clr-text-on-primary);
			user-select: none;
		}

		.reserved-segment {
			opacity: 0.4;
		}

		#tell-time {
			font-weight: bold;
			margin-top: 20px;
			margin-bottom: 0;
		}

		.rotating-dots {
			position: relative;
			width: 60px;
			height: 60px;
		}

		.rotating-dots .dot {
			position: absolute;
			width: 12px;
			height: 12px;
			border-radius: 50%;
			background: var(--clr-accent);
			animation: dots 1.5s infinite ease-in-out;
		}

		.rotating-dots .dot:nth-child(1) {
			top: 0;
			left: 50%;
			transform: translateX(-50%);
			animation-delay: 0s;
		}

		.rotating-dots .dot:nth-child(2) {
			top: 25%;
			right: 0;
			animation-delay: 0.2s;
		}

		.rotating-dots .dot:nth-child(3) {
			bottom: 0;
			left: 50%;
			transform: translateX(-50%);
			animation-delay: 0.4s;
		}

		.rotating-dots .dot:nth-child(4) {
			top: 25%;
			left: 0;
			animation-delay: 0.6s;
		}

		@@keyframes dots {
			0%, 100% {
				transform: scale(1);
				opacity: 1;
			}

			50% {
				transform: scale(1.5);
				opacity: 0.5;
			}
		}


		.btn {
			padding: 12px 20px;
			border: none;
			border-radius: 6px;
			cursor: pointer;
			font-size: 1rem;
			transition: background-color 0.3s ease, transform 0.2s ease;
		}

		.btn:hover {
			transform: translateY(-2px);
		}

		.btn-primary {
			background-color: var(--clr-primary);
			color: var(--clr-text-on-primary);
		}

		.btn-primary:hover {
			background-color: var(--clr-primary);
			opacity: 0.9;
		}

		.btn-secondary {
			background-color: var(--clr-secondary);
			color: var(--clr-text-on-secondary);
		}

		.btn-secondary:hover {
			background-color: var(--clr-secondary);
			opacity: 0.9;
		}

		.btn-close {
			background-color: #FF4D4D;
			color: var(--clr-text-on-secondary);
		}

		.btn-close:hover {
			background-color: #FF6666;
		}
	</style>
}

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		const close_modal = document.getElementById("close-modal")
		const submit_btn = document.getElementById("submit-request")
		const modal_container = document.getElementById("xmodal-container")
		const confirm_container = document.getElementById("ymodal-container")
		const dateDisplay = document.getElementById('date-display');
		const leftArrow = document.getElementById('left-arrow');
		const rightArrow = document.getElementById('right-arrow');
		const svg = document.getElementById("clock");
		const reservedGroup = document.getElementById("reservedArcs");
		const hourMarks = document.getElementById("hourMarks");
		const startHandle = document.getElementById("startHandle");
		const endHandle = document.getElementById("endHandle");
		const startTimeText = document.getElementById("startTimeText");
		const endTimeText = document.getElementById("endTimeText");
		const amBtn = document.getElementById("am-pm")
		const watchFace = document.getElementById("watch-face")
		const loading = document.getElementById("loading")
		const closeConfirmBtn = document.getElementById("close-confirm")
		const confirmRequestBtn = document.getElementById("confirm-request")
		const confirmbody = document.getElementById("confirm-body")

		const CENTER = { x: 150, y: 150 };
		const RADIUS = 150;

		let currentDate;
		let startAngle = null;
		let endAngle = null;
		let activeSegment = null;
		let dragging = null;
		let isAM;
		let currentRoomId;
		let currentPrice;
		let lastTotal;
		let userBalance = @Model.WalletBalance;
		let reservedSegments = [];

		async function submitRequest() {
			confirm_container.classList.add("d-none")
			modal_container.classList.remove("d-none")

			if (startAngle == null || endAngle == null) {
				err_msg.innerText = "Invalid Time"
				err_msg.classList.remove("d-none")
				succ_msg.classList.add("d-none")
			}

			let url = "/Students/Center/ReserveRoom"
			let request = {
				roomId: currentRoomId,
				date: currentDate.toISOString().split('T')[0],
				start: formatTime24(angleToTime(startAngle)),
				end: formatEndTime24(angleToTime(endAngle))
			}

			startLoading()
			let result = await getData(url, "POST", request)
			endLoading()

			if (result.isValid) {
				userBalance -= lastTotal;
				resetSelection()
				modal_container.classList.add("d-none")
				showSuccessToast("Ok", 'Reserved Successfully',5);
			} else {
				showErrorToast("Error", result.errors[0], 5);
			}
		}

		async function openModal(id, price) {
			currentRoomId = id;
			currentPrice = price;
			currentDate = new Date();
			await renderComponent()
			modal_container.classList.remove("d-none")
		}

		async function renderComponent() {
			isAM = true
			stylizeAM()
			let url = "/students/center/GetReservations"
			let req = {
				id: currentRoomId,
				date: currentDate.toISOString().split('T')[0]
			}

			let reservationsList = await getData(url, "POST", req)
			buildList(reservationsList)

			updateDateDisplay();
			drawHourMarks();
			drawReservedArcs();
		}

		function closeModal() {
			resetSelection()
			modal_container.classList.add("d-none")
		}

		function parseTimeToDate(timeStr) {
			const [hours, minutes] = timeStr.split(':').map(Number);
			const now = new Date();
			now.setHours(hours, minutes, 0, 0);
			return now;
		}

		function hoursDiff(diff) {
			return diff / (1000 * 60 * 60)
		}

		// Example:
		const time = parseTimeToDate("06:15");
		console.log(time); // Output: Date object with today’s date at 06:15

		function openConfirm() {
			let s = parseTimeToDate(formatTime24(angleToTime(startAngle)));
			let e = parseTimeToDate(formatEndTime24(angleToTime(endAngle)));
			let d = hoursDiff(e-s);
			let t = d * currentPrice;
			lastTotal = t;
			let b = userBalance;

			confirmbody.innerHTML = `<div>
										<table style=" margin: auto; text-align: left; ">
											<tbody>
												<tr>
													<td>
														total time
													</td>
													<td>
														${d} hr
													</td>
												</tr>
												<tr>
													<td>
														total ammount
													</td>
													<td>
														L.E. ${t} 
													</td>
												</tr>
												<tr>
													<td>
														your balance
													</td>
													<td>
														L.E. ${b}
													</td>
												</tr>
												<tr>
													<td>
														remaining
													</td>
													<td>
														L.E. ${b - t}
													</td>
												</tr>
											</tbody>
										</table>
									</div>`

			modal_container.classList.add("d-none")
			confirm_container.classList.remove("d-none")
		}

		function closeConfirm() {
			confirm_container.classList.add("d-none")
			modal_container.classList.remove("d-none")
		}

		function buildList(list) {
			reservedSegments = []

			list.forEach(item => {
				let _am = true;

				let [hoursStart, minutesStart] = item.start.split(':').map(Number);
				if (hoursStart >= 12) {
					_am = false;
					hoursStart -= 12;
				}

				let [hoursEnd, minutesEnd] = item.end.split(':').map(Number);
				if (hoursEnd >= 12) {
					_am = false;
					hoursEnd -= 12;
				}

				reservedSegments.push({
					start: { h: hoursStart, m: minutesStart }, end: { h: hoursEnd, m: minutesEnd }, am: _am
				})
			})
		}

		async function getData(_url, _method, _body = {}) {
			try {
				let response = await fetch(_url, {
					method: _method,
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify(_body)
				})

				if (!response.ok) throw new Error(response.statusText)

				let data = await response.json()
				return data
			} catch {
				return []
			}
		}

		// Function to update the displayed date
		const updateDateDisplay = () => {
			const options = { year: 'numeric', month: 'long', day: 'numeric' };
			dateDisplay.textContent = currentDate.toLocaleDateString(undefined, options);
		};

		// Move backward in time
		leftArrow.addEventListener('click', async () => {
			if ((currentDate.getDate() - 1) < new Date().getDate()) return
			currentDate.setDate(currentDate.getDate() - 1);
			resetSelection()
			startLoading()
			await renderComponent()
			endLoading()
		});

		// Move forward in time
		rightArrow.addEventListener('click', async () => {
			currentDate.setDate(currentDate.getDate() + 1);
			resetSelection()
			startLoading()
			await renderComponent()
			endLoading()
		});

		function startLoading() {
			svg.classList.add("d-none")
			loading.classList.remove("d-none")
		}

		function endLoading() {
			loading.classList.add("d-none")
			svg.classList.remove("d-none")
		}

		function snapTo30(angle) {
			return Math.round(angle / 15) * 15;
		}

		function timeToAngle(h, m) {
			const hour24 = isAM ? h % 12 : (h % 12 + 12) % 24;
			return ((hour24 % 12) * 60 + m) * 0.5;
		}

		function angleToTime(angle) {
			let totalMins = Math.round(angle / 0.5);
			let h = Math.floor(totalMins / 60) % 12;
			let m = totalMins % 60;
			if (h === 0) h = 12;
			return { h, m };
		}

		function formatTime({ h, m }) {
			return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')} ${isAM ? 'AM' : 'PM'}`;
		}

		function formatEndTime({ h, m }) {
			let result = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
			if (h == 12) {
				result += ` ${isAM ? 'PM' : 'AM'}`
			} else {
				result += ` ${isAM ? 'AM' : 'PM'}`
			}
			return result
		}

		function formatTime24({ h, m }) {
			if (isAM && h == 12) h = 0
			if (!isAM && h != 12) h += 12
			return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:00`;
		}

		function formatEndTime24({ h, m }) {
			if (!isAM && h == 12) h = 0
			if (!isAM && h != 12) h += 12
			return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:00`;
		}

		function polarToCartesian(cx, cy, r, angle) {
			const rad = (angle - 90) * Math.PI / 180;
			return {
				x: cx + r * Math.cos(rad),
				y: cy + r * Math.sin(rad)
			};
		}

		function describeArc(x, y, r, startAngle, endAngle) {
			const start = polarToCartesian(x, y, r, endAngle);
			const end = polarToCartesian(x, y, r, startAngle);
			const largeArc = endAngle - startAngle <= 180 ? 0 : 1;
			return ["M", start.x, start.y, "A", r, r, 0, largeArc, 0, end.x, end.y].join(" ");
		}

		function drawHourMarks() {
			for (let i = 1; i <= 12; i++) {
				const angle = i * 30;
				const pos = polarToCartesian(CENTER.x, CENTER.y, RADIUS - 30, angle);
				const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
				text.setAttribute("x", pos.x);
				text.setAttribute("y", pos.y);
				text.setAttribute("text-anchor", "middle");
				text.setAttribute("alignment-baseline", "middle");
				text.setAttribute("class", "hour-mark");
				text.textContent = i;
				hourMarks.appendChild(text);
			}
		}

		function drawReservedArcs() {
			reservedGroup.innerHTML = '';
			reservedSegments.forEach(seg => {
				if (seg.am !== isAM) return;
				const start = timeToAngle(seg.start.h, seg.start.m);
				const end = timeToAngle(seg.end.h, seg.end.m);
				const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
				path.setAttribute("d", describeArc(CENTER.x, CENTER.y, RADIUS - 10, start, end));
				path.setAttribute("stroke", "#333");
				path.setAttribute("stroke-width", "20");
				path.setAttribute("fill", "none");
				path.setAttribute("class", "reserved-segment");
				reservedGroup.appendChild(path);
			});
		}

		function moveHandle(handle, angle) {
			const pos = polarToCartesian(CENTER.x, CENTER.y, RADIUS - 10, angle);
			handle.setAttribute("cx", pos.x);
			handle.setAttribute("cy", pos.y);
		}

		function getAngleFromEvent(e) {
			const pt = svg.createSVGPoint();
			pt.x = e.clientX;
			pt.y = e.clientY;
			const loc = pt.matrixTransform(svg.getScreenCTM().inverse());
			const dx = loc.x - CENTER.x;
			const dy = loc.y - CENTER.y;
			let angle = Math.atan2(dy, dx) * 180 / Math.PI + 90;
			return snapTo30((angle + 360) % 360);
		}

		function isWithinReserved(angle) {
			return reservedSegments.some(seg => {
				if (seg.am !== isAM) return false;
				const start = timeToAngle(seg.start.h, seg.start.m);
				const end = timeToAngle(seg.end.h, seg.end.m);
				return angle >= start && angle < end;
			});
		}

		function updateTimeTexts() {
			startTimeText.textContent = startAngle !== null ? formatTime(angleToTime(startAngle)) : '--:--';
			endTimeText.textContent = endAngle !== null ? formatEndTime(angleToTime(endAngle)) : '--:--';
		}

		function buildAvailableSegments() {
			const reservedAngles = reservedSegments.filter(s => s.am === isAM).map(s => ({
				start: timeToAngle(s.start.h, s.start.m),
				end: timeToAngle(s.end.h, s.end.m)
			})).sort((a, b) => a.start - b.start);

			const segments = [];
			let lastEnd = 0;
			for (const seg of reservedAngles) {
				if (lastEnd < seg.start) segments.push({ start: lastEnd, end: seg.start });
				lastEnd = seg.end;
			}
			if (lastEnd < 360) segments.push({ start: lastEnd, end: 360 });
			return segments;
		}

		svg.addEventListener("click", (e) => {
			const angle = getAngleFromEvent(e);
			if (isWithinReserved(angle)) return;

			if (startAngle === null) {
				startAngle = angle;
				startHandle.style.display = 'block';
				moveHandle(startHandle, angle);

				activeSegment = buildAvailableSegments().find(s => angle >= s.start && angle <= s.end);

			} else if (endAngle === null && activeSegment && angle > startAngle && angle <= activeSegment.end) {
				endAngle = angle;
				endHandle.style.display = 'block';
				moveHandle(endHandle, angle);
			}
			updateTimeTexts();
		});

		function resetSelection() {
			startAngle = null;
			endAngle = null;
			activeSegment = null;
			startHandle.style.display = 'none';
			endHandle.style.display = 'none';
			updateTimeTexts();
		}

		svg.addEventListener("mousedown", (e) => {
			if (e.target === startHandle) dragging = "start";
			else if (e.target === endHandle) dragging = "end";
		});

		svg.addEventListener("mousemove", (e) => {
			if (!dragging || !activeSegment) return;
			let angle = getAngleFromEvent(e);
			if (angle < activeSegment.start || angle > activeSegment.end) return;
			if (dragging === "start" && (endAngle !== null && angle >= endAngle)) return;
			if (dragging === "end" && (startAngle !== null && angle <= startAngle)) return;

			if (dragging === "start") {
				startAngle = angle;
				moveHandle(startHandle, angle);
			} else {
				endAngle = angle;
				moveHandle(endHandle, angle);
			}
			updateTimeTexts();
		});

		function toggleAM() {
			resetSelection()
			isAM = !isAM
			stylizeAM()
			drawReservedArcs()
		}

		function stylizeAM() {
			if (isAM) {
				amBtn.innerText = "AM"
				watchFace.setAttribute("fill", "var(--clr-primary)")
			} else {
				amBtn.innerText = "PM"
				watchFace.setAttribute("fill", "var(--clr-primary-pm)")
			}
		}

		close_modal.addEventListener("click", closeModal)
		submit_btn.addEventListener("click", openConfirm)

		closeConfirmBtn.addEventListener("click", closeConfirm)
		confirmRequestBtn.addEventListener("click", submitRequest)

		svg.addEventListener("mouseup", () => dragging = null);
		svg.addEventListener("mouseleave", () => dragging = null);
	</script>
}