@model TeacherProfileVM

@{
    ViewData["Title"] = $"{Model.TeacherName}";
}

<div class="col-12 container">
    <div class="profile-container">
        <div class="profile-header">
            @if (Model.TeacherProfilePicture != null)
            {
                <img src="data:image/*;base64,@(Convert.ToBase64String(Model.TeacherProfilePicture))"
                    alt="Student Profile" class="profile-image" />
            }
            else
            {
                <img src="~/images/default_profile.png" alt="Student Profile" class="profile-image" />
            }
            <div class="profile-details">
                <h2 class="profile-name">@Model.TeacherName</h2>
                <h3 class="profile-tagline">@Model.TagLine</h3>
                @if (Model.TeacherEmail != null)
                {
                    <div class="profile-mina">
                        <i class="fas fa-envelope"></i>
                        &nbsp;<span>@Model.TeacherEmail</span>
                    </div>
                }
                @if (Model.TeacherPhone != null)
                {
                    <div class="profile-mina">
                        <i class="fas fa-phone"></i>
                        &nbsp;<span>@Model.TeacherPhone</span>
                    </div>
                }
                @if(Model.IsAvailableForPrivateGroups)
                {
                    <div class="profile-mina">
                        <i class="fa-solid fa-circle-info"></i>
                        &nbsp;<span>Offers private groups for L.E. @Model.PrivateGroupPrice</span>
                    </div>
                }
            </div>
        </div>
        @* @if (Model.IsAvailableForPrivateGroups) *@
        @* { *@
        @*     <div class="book-now-btn" id="open-modal" > *@
        @*         <button> *@
        @*             <i class="fa-solid fa-arrow-up-right-from-square"></i> *@
        @*             &nbsp;Request Now *@
        @*         </button> *@
        @*     </div> *@
        @* } *@
    </div>
</div>

<div class="col-12 container">
    <div class="container row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var group in Model.AvailbleGroups)
        {
            <div class="group-card__container">
                <div class="group-card">
                    <div class="group-card__image">
                        @if (group.CoverPicture != null)
                        {
                            <img alt="cover" src="data:image/*;base64,@(Convert.ToBase64String(group.CoverPicture))" />
                        }
                        else
                        {
                            <img alt="cover" src="~/images/default_cover.png" />
                        }
                    </div>
                    <div class="group-card__content">
                        <div class="group-card__subject">@group.SubjectName</div>
                        <div class="group-card__subtitle">@group.Year, @group.Semester</div>
                        <div class="group-card__features">
                            @if (group.IsOnline)
                            {
                                <span class="group-card__feature">
                                    <i class="fas fa-globe"></i>&nbsp;Online
                                </span>
                            }
                            @if(group.IsGirlsOnly)
                            {
                                <span class="group-card__feature">
                                    <i class="fas fa-child-dress"></i>&nbsp;Girls Only
                                </span>
                            }
                        </div>
                        <a asp-area="Students" asp-controller="Group" asp-action="Preview" asp-route-id="@group.GroupID" class="group-card__button "><i class="fa-solid fa-arrow-up-right-from-square"></i> <span> Details</span></a>
                        <div class="group-card__footer">
                            <div class="group-card__price">
                                L.E. @group.PricePerSession
                            </div>
                            <div class="group-card__capacity">
                                <i class="fas fa-users"></i>&nbsp;@(group.MaxStudents - group.CurrentStudents) / @group.MaxStudents
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div id="xmodal-container" class="d-none">
    <div id="xmodal-overlay">
        <div class="form-container">
            <h1 class="form-header">Request A Private Group</h1>
            <form>
                <div class="form-group">
                    <label for="subject-select">Subject</label>
                    <select id="subject-select"></select>
                </div>
                <div class="form-group">
                    <label for="governorate-select">Governorate</label>
                    <select id="governorate-select"></select>
                </div>
                <div class="form-group">
                    <label for="city-input">City</label>
                    <input type="text" id="city-input" placeholder="City" />
                </div>
                <div class="form-group">
                    <label for="neighborhood-input">Neighborhood</label>
                    <input type="text" id="neighborhood-input" placeholder="Neighborhood" />
                </div>
                <div class="form-group">
                    <label for="street-input">Street</label>
                    <input type="text" id="street-input" placeholder="Street" />
                </div>
                <div class="form-group">
                    <label for="details-input">Details</label>
                    <textarea id="details-input" rows="3"></textarea>
                </div>
                <div class="form-navigation">
                    <button id="close-modal" class="btn btn-close">
                        <i class="fa-solid fa-xmark"></i>
                        &nbsp;Cancel
                    </button>
                    <button id="submit-request" class="btn btn-primary">
                        <i class="fas fa-check icon"></i>
                        &nbsp;Submit
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/form.css" />
    <style>
        .group-card {
            background-color: var(--clr-surface);
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid var(--clr-border);
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .group-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
        }

        /* Element - Group Card Image */
        .group-card__image {
            width: 100%;
            height: 140px;
            /* decreased from 180px */
            background-color: var(--clr-primary);
            overflow: hidden;
        }

        .group-card__image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }


        /* Element - Group Card Content */
        .group-card__content {
            padding: 15px;
            /* reduced padding */
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
  
        .group-card__button {
            font-size: 1rem;
            font-weight: 500;
            padding: 10px 15px;
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
            border: none;
            display: flex;
            justify-content: center;
			align-content: center;
			text-decoration: none;
            border-radius: 8px;
            margin-bottom: 10px;
            column-gap: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .group-card__button:hover {
                background-color: var(--clr-primary-dark);
				border: solid 2px var(--clr-primary);
                transform: translateY(-2px);
            }

            .group-card__button i {
                font-size: 1.1rem;
            }


        .group-card__button span {
            text-underline-offset: 2px;
        }

        .group-card__button:hover {
            cursor: pointer;
            color: var(--clr-text-secondary)
        }

        .group-card__subject {
            font-size: 1rem;
            color: var(--clr-text-secondary);
            margin-bottom: 5px;
        }

        .group-card__subtitle {
            font-size: 0.8rem;
            color: var(--clr-text-secondary);
            margin-bottom: 15px;
        }

        /* Element - Group Card Features */
        .group-card__features {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }

        .group-card__feature {
            display: flex;
            align-items: center;
            background-color: var(--clr-accent);
            color: var(--clr-text-on-accent);
            font-size: 0.85rem;
            padding: 5px 10px;
            border-radius: 20px;
        }

        .group-card__feature i {
            margin-right: 5px;
        }

        /* Element - Group Card Footer */
        .group-card__footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: auto;
            padding-top: 15px;
            border-top: 1px solid var(--clr-border);
        }

        .group-card__price {
            font-weight: 700;
            color: var(--clr-secondary);
            font-size: 1.2rem;
        }

        .group-card__capacity {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            color: var(--clr-text-secondary);
        }

        .group-card__capacity i {
            margin-right: 5px;
        }

        .group-card__container {
            flex: 0 0 100%;
            padding: 10px 15px;
            box-sizing: border-box;
        }

        @@media (min-width: 768px) {
            .group-card__container {
            flex: 0 0 50%;
            }
        }

        @@media (min-width: 992px) {
            .group-card__container {
                flex: 0 0 33.333%;
            }
        }

        @@media (min-width: 1200px) {
            .group-card__container {
                flex: 0 0 25%;
            }

        }

        .profile-container {
            background-color: var(--clr-surface);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 24px;
            margin-top: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--clr-border);
            display: flex;
            justify-content: flex-start;
            align-items: center;
            position: relative;
            /* Allow wrapping on smaller screens */
            flex-wrap: wrap;
        }

        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 24px;
        }

        .profile-image {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            margin-top: 20px;
            border: 3px solid var(--clr-primary);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .profile-details {
            margin-left: 24px;
        }

        .profile-name {
            color: var(--clr-primary);
            font-size: 24px;
            font-weight: 700;
        }

        .profile-tagline {
            color: var(--clr-primary);
            font-weight: normal;
            opacity: 0.8;
            font-size: 1rem;
            margin-top: -10px;
            margin-bottom: 12px;
        }

        .profile-mina {
            display: flex;
            row-gap: 5px;
            align-items: center;
            margin-bottom: 8px;
            margin-left: 15px;
            color: var(--clr-text-secondary);
        }

        .profile-mina i {
            margin-right: 12px;
            color: var(--clr-secondary);
            width: 20px;
            text-align: center;
        }

        .book-now-btn {
            position: absolute;
            right: 25px;
            bottom: 25px;
            padding: 10px;
        }

        .book-now-btn button {
            background-color: var(--clr-primary);
            color: var(--clr-text-on-primary);
            border: none;
            padding: 12px 12px;
            border-radius: 0.3rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            gap: 15px;
        }

        .book-now-btn button:hover {
            background-color: var(--clr-secondary);
        }

        /* Responsive adjustments: for screens 768px and below */
        @@media only screen and (max-width: 768px) {
            .profile-container {
                flex-direction: column;
                align-items: center;
                text-align: center;
            }

            .profile-header {
                flex-direction: column;
                align-items: center;
            }

            .profile-image {
                width: 100px;
                height: 100px;
                margin: 0 0 15px;
            }

            .profile-details {
                margin-left: 0;
            }

            .profile-info {
                margin-left: 0;
                justify-content: center;
            }

            /* Remove absolute positioning for the button and place it below content */
            .book-now-btn {
                position: static;
                margin-top: 20px;
                width: 100%;
                display: flex;
                justify-content: center;
            }
        }

        #xmodal-container {
            position: fixed;
            top: 0;
            left: 0;
            bottom:0;
            right: 0;
            z-index: 1000;
        }

        #xmodal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let open_modal = document.getElementById("open-modal")
        let close_modal = document.getElementById("close-modal")
        let submit_btn = document.getElementById("submit-request")
        let modal_container = document.getElementById("xmodal-container")
        let subject_select = document.getElementById("subject-select")
        let governorate_select = document.getElementById("governorate-select")
        let city_input = document.getElementById("city-input")
        let neighborhood_input = document.getElementById("neighborhood-input")
        let street_input = document.getElementById("street-input")
        let details_input = document.getElementById("details-input")

        let teacherId = @Model.TeacherID
        let studentId = @Model.StudentID


        let governorate_list = [
            { value: "Cairo", display: "Cairo" },
            { value: "Alexandria", display: "Alexandria" },
            { value: "Giza", display: "Giza" },
            { value: "Port Said", display: "Port Said" },
            { value: "Suez", display: "Suez" },
            { value: "Dakahlia", display: "Dakahlia" },
            { value: "Sharqia", display: "Sharqia" },
            { value: "Qalyubia", display: "Qalyubia" },
            { value: "Beheira", display: "Beheira" },
            { value: "Minya", display: "Minya" },
            { value: "Helwan", display: "Helwan" },
            { value: "6th of October", display: "6th of October" },
            { value: "Ismailia", display: "Ismailia" },
            { value: "Gharbia", display: "Gharbia" },
            { value: "Monufia", display: "Monufia" },
            { value: "Kafr El Sheikh", display: "Kafr El Sheikh" },
            { value: "Faiyum", display: "Faiyum" },
            { value: "Beni Suef", display: "Beni Suef" },
            { value: "Asyut", display: "Asyut" },
            { value: "Sohag", display: "Sohag" },
            { value: "Qena", display: "Qena" },
            { value: "Aswan", display: "Aswan" },
            { value: "Luxor", display: "Luxor" },
            { value: "Red Sea", display: "Red Sea" },
            { value: "New Valley", display: "New Valley" },
            { value: "Matrouh", display: "Matrouh" },
            { value: "North Sinai", display: "North Sinai" },
            { value: "South Sinai", display: "South Sinai" },
            { value: "Damietta", display: "Damietta" },
        ]

        async function submitRequest() {
            let request_body = {
                teacherID : teacherId,
                studentID : studentId,
                subjectID : subject_select.value,
                governorate : governorate_select.value,
                city : city_input.value,
                neighborhood : neighborhood_input.value,
                street : street_input.value,
                details : details_input.value
            }
            let url = "/students/group/SendRequest"
            let result = await getData(url, "POST", request_body)
            if (result.isValid) {
                modal_container.classList.add("d-none")
                showSuccessToast("OK", "Request Sent Successfully", 3)

            } else {
               
				showErrorToast("Error", result.errors[0], 3)
            }
        }

        document.getElementById("open-modal")?.addEventListener("click", function () {
            document.getElementById("xmodal-container")?.classList.remove("d-none");
        });

        document.getElementById("close-modal")?.addEventListener("click", function (e) {
            e.preventDefault();
            document.getElementById("xmodal-container")?.classList.add("d-none");
        });

        async function openModal() {
            buildList(governorate_select, governorate_list)
            let url = "/students/group/PrepareRequest"
            let subject_list = await getData(url, "POST", {teacherID : teacherId, studentID : studentId})
            buildList(subject_select, subject_list)
            modal_container.classList.remove("d-none")
        }

        function closeModal() {
            modal_container.classList.add("d-none")
        }

        function buildList(_select_input, _items_list) {
            let options = ``
            _items_list.forEach(item => {
                options += `<option value="${item.value}">${item.display}</option>`
            })
            _select_input.innerHTML = options
        }

        async function getData(_url, _method, _body = {}) {
            try {
                let response = await fetch(_url, {
                    method : _method,
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    body : JSON.stringify(_body)
                })

                if (!response.ok) throw new Error(response.statusText)

                let data = await response.json()
                return data
            } catch {
                return []
            }
        }

        open_modal.addEventListener("click", openModal)
        close_modal.addEventListener("click", closeModal)
        submit_btn.addEventListener("click", submitRequest)
    </script>
}