@model List<XCourse.Core.ViewModels.StudentsViewModels.SessionViewModel>

@{
    ViewData["Title"] = "Sessions";
}

@section Styles {
    <link rel="stylesheet" href="~/Content/tui-calendar/tui-calendar.min.css">

    <!--Search styling-->
    <style>
        .search {
            padding: 10px 35px 10px 15px; /* Add padding for text and icon space */
            border: 1px solid var(--clr-border);
            border-radius: 25px;
            font-size: 1rem;
            color: var(--clr-text-primary);
            background-color: var(--clr-surface);
            width: 100%; /* Make it take full width of its container */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
            transition: border-color 0.3s ease; /* Smooth transition for focus state */
        }

            .search::placeholder {
                color: var(--clr-text-secondary);
            }

            .search:focus {
                outline: none; /* Remove default focus outline */
                border-color: var(--clr-primary); /* Change border color on focus */
            }

        /* Styling for the container to hold the input and the icon */
        .search-container {
            position: relative; 
            margin : 15px auto;
        }

            .search-container i, .search-container svg { /* Style the Font Awesome icon */
                position: absolute;
                top: 50%;
                right: 15px; /* Adjust as needed */
                transform: translateY(-50%);
                color: var(--clr-text-secondary);
                font-size: 1.2rem; /* Adjust icon size */
                cursor: pointer;
            }
    </style>

    <style>

        .calendar-container {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
        }

        .calendar-header {
            background: linear-gradient(45deg, var(--primary-color), #6e8afc);
            border: none;
            padding: 15px;
        }

        .calendar-header h4 {
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .empty-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }

        .btn-calendar-view {
            background-color: white;
            color: var(--primary-color);
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            margin-left: 5px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-calendar-view:hover, .btn-calendar-view.active {
            background-color: #e9edfe;
        }

        .btn-calendar-view i {
            margin-right: 5px;
        }

        /* Calendar customization */
        #calendar .tui-full-calendar-month-week-item {
            border-radius: 4px;
            overflow: hidden;
        }

        #calendar .tui-full-calendar-weekday-grid-line {
            border-color: #edf2f7;
        }

        #calendar .tui-full-calendar-weekday-grid-line:hover {
            background-color: #f8fafc;
        }

        #calendar .tui-full-calendar-month-week-item {
            cursor: pointer;
        }

        #calendar .tui-full-calendar-month-more-button {
            background-color: var(--primary-color);
            color: white;
            border-radius: 4px;
        }

        /* Custom template styles */
        .session-template {
            padding: 4px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            font-size: 12px;
            font-weight: 500;
            overflow: hidden;
        }

        .session-template .session-icon {
            margin-right: 4px;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        .session-template .session-title {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .online-session {
            background-color: rgba(19, 194, 150, 0.15);
            border-left: 3px solid var(--online-color);
        }

        .online-session .session-icon {
            background-color: var(--online-color);
            color: white;
        }

        .offline-session {
            background-color: rgba(74, 108, 247, 0.15);
            border-left: 3px solid var(--offline-color);
        }

        .offline-session .session-icon {
            background-color: var(--offline-color);
            color: white;
        }

        /* Popup styles */
        .tui-full-calendar-popup-container {
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15) !important;
            border-radius: 10px !important;
            overflow: hidden !important;
        }

        .tui-full-calendar-popup-section-item {
            padding: 8px 0 !important;
        }

        .tui-full-calendar-popup-section-title {
            font-weight: 600 !important;
        }

        .tui-full-calendar-section-button {
            background-color: var(--primary-color) !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
        }
    </style>

    <style>
        /* Calendar Loading Overlay */
        .calendar-loading-overlay {
            position: absolute;
            top: 60px; /* Matches your calendar-controls height */
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--clr-surface);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loading-message {
            margin-top: 20px;
            font-size: 18px;
            color: var(--clr-primary);
            text-align: center;
        }

        /* Calendar Grid Animation */
        .calendar-grid-loader {
            width: 200px;
            height: 200px;
            position: relative;
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-template-rows: repeat(6, 1fr);
            gap: 4px;
        }

        .calendar-cell {
            background-color: var(--clr-border);
            border-radius: 4px;
            opacity: 0.2;
            animation: pulse-fade 2s infinite;
        }

            /* Create highlight effects on cells */
            .calendar-cell:nth-child(7n+1) {
                animation-delay: 0.1s;
            }

            .calendar-cell:nth-child(7n+2) {
                animation-delay: 0.2s;
            }

            .calendar-cell:nth-child(7n+3) {
                animation-delay: 0.3s;
            }

            .calendar-cell:nth-child(7n+4) {
                animation-delay: 0.4s;
            }

            .calendar-cell:nth-child(7n+5) {
                animation-delay: 0.5s;
            }

            .calendar-cell:nth-child(7n+6) {
                animation-delay: 0.6s;
            }

            .calendar-cell:nth-child(7n) {
                animation-delay: 0.7s;
            }

            /* Special highlighted "today" cell */
            .calendar-cell:nth-child(17) {
                background-color: var(--clr-accent);
                opacity: 0.6;
                animation: pulse-today 2s infinite;
            }

        /* Calendar event animations */
        .calendar-event {
            position: absolute;
            height: 16px;
            border-radius: 3px;
            background-color: var(--clr-primary);
            opacity: 0.7;
            animation: slide-in 3s infinite;
        }

            .calendar-event:nth-child(43) {
                top: 40%;
                left: 20%;
                width: 30%;
                animation-delay: 0.5s;
            }

            .calendar-event:nth-child(44) {
                top: 60%;
                left: 50%;
                width: 25%;
                background-color: var(--clr-secondary);
                animation-delay: 1s;
            }

            .calendar-event:nth-child(45) {
                top: 20%;
                left: 60%;
                width: 20%;
                background-color: var(--clr-accent);
                animation-delay: 1.5s;
            }

        /* Clock spinner animation */
        .calendar-clock {
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 3px solid var(--clr-border);
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .clock-hand {
            position: absolute;
            width: 2px;
            height: 20px;
            background-color: var(--clr-primary);
            top: 50%;
            left: 50%;
            transform-origin: bottom center;
            animation: rotate 2s linear infinite;
        }

            .clock-hand:nth-child(2) {
                height: 15px;
                width: 3px;
                background-color: var(--clr-secondary);
                animation: rotate 12s linear infinite;
            }

        @@keyframes pulse-fade {
            0%, 100% {
                opacity: 0.2;
            }

            50% {
                opacity: 0.5;
            }
        }

        @@keyframes pulse-today {
            0%, 100% {
                opacity: 0.6;
            }

            50% {
                opacity: 1;
            }
        }

        @@keyframes slide-in {
            0% {
                transform: translateX(-10px);
                opacity: 0.3;
            }

            50% {
                transform: translateX(0);
                opacity: 0.7;
            }

            100% {
                transform: translateX(-10px);
                opacity: 0.3;
            }
        }

        @@keyframes rotate {
            0% {
                transform: translate(-50%, 0) rotate(0deg);
            }

            100% {
                transform: translate(-50%, 0) rotate(360deg);
            }
        }

        /* Loading dots */
        .loading-dots {
            display: flex;
            margin-top: 10px;
        }

            .loading-dots .dot {
                width: 10px;
                height: 10px;
                margin: 0 5px;
                border-radius: 50%;
                background-color: var(--clr-primary);
                animation: dots-fade 1.5s infinite ease-in-out;
            }

                .loading-dots .dot:nth-child(1) {
                    animation-delay: 0s;
                }

                .loading-dots .dot:nth-child(2) {
                    animation-delay: 0.3s;
                }

                .loading-dots .dot:nth-child(3) {
                    animation-delay: 0.6s;
                }

        @@keyframes dots-fade {
            0%, 100% {
                opacity: 0.3;
                transform: scale(0.8);
            }

            50% {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Calendar Controls Styling - copied from your CSS */
        .calendar-controls {
            padding: 10px 20px;
            background-color: var(--clr-surface);
            border-bottom: 1px solid var(--clr-border);
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
            height: 60px; /* Fixed height for controls */
            box-sizing: border-box;
        }

            .calendar-controls button {
                background-color: var(--clr-primary);
                color: var(--clr-text-on-primary);
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .calendar-controls button:hover {
                    background-color: var(--clr-secondary);
                }

        #current-range {
            font-weight: bold;
            color: var(--clr-primary);
        }

        /* Calendar Container */
        #calendar {
            height: calc(100vh - 120px); /* Adjust height based on controls */
            border: 1px solid var(--clr-border);
            position: relative;
        }

        /* Error message styling */
        .calendar-error {
            display: none;
            text-align: center;
            padding: 20px;
            background-color: rgba(220, 53, 69, 0.1);
            border: 1px solid #dc3545;
            border-radius: 4px;
            color: #dc3545;
            margin: 20px;
        }

            .calendar-error code {
                display: block;
                margin-top: 10px;
                background-color: rgba(0,0,0,0.05);
                padding: 10px;
                border-radius: 4px;
                white-space: pre-wrap;
                text-align: left;
                font-size: 14px;
            }

            .calendar-error button {
                margin-top: 15px;
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
            }
    </style>


}

<div class="container">



    <div class="col-12 row">
        <div class="col-3"></div>
        <div class="col-lg-6 col-12">
            <div class="search-container">
                <input class="search" id="sessionSearch" placeholder="Search..." />
                <i class="fas fa-search"></i>
            </div>
        </div>
        <div class="col-3"></div>
    </div>

    <!-- Calendar view -->
    <div class="card shadow-sm border-0 overflow-hidden">
        <div class="container">
            <div class="calendar-controls" style="border-top-left-radius: 10px; border-top-right-radius: 10px;">
                <button id="prevBtn"><i class="fas fa-chevron-left"></i></button>
                <button id="nextBtn"><i class="fas fa-chevron-right"></i></button>
                <button id="todayBtn">Today</button>
                <span id="current-range"></span>
                <div style="margin-left: auto;">
                    <button id="dayView">Day</button>
                    <button id="weekView">Week</button>
                    <button id="monthView">Month</button>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="container">
                <div class="card-body p-0">
                    <div class="calendar-container">
                        <div id="calendar" style="height: 650px; border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; overflow: hidden;"></div>    @*Calendar*@
                        <div id="emptyMessage" class="empty-message" style="display: none;">
                            <h4><i class="fas fa-search text-primary mb-3" style="font-size: 2rem;"></i></h4>
                            <h4 class="mb-3">No sessions match your search</h4>
                            <p class="text-muted">Try adjusting your search criteria</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script src="@Url.Content("~/Scripts/tui-code-snippet.min.js")"></script>
    <script src="@Url.Content("~/Scripts/tui-calendar.min.js")"></script>
    <script>
       
        document.addEventListener("DOMContentLoaded", function () {
            // Template functions
            function getMonthEventTemplate(event) {
                var isOnline = event.raw.isOnline === 'true';
                var iconClass = isOnline ? 'fa-wifi' : 'fa-building';
                var sessionClass = isOnline ? 'online-session' : 'offline-session';

                return '<div class="session-template ' + sessionClass + '">' +
                        '<div class="session-icon"><i class="fas ' + iconClass + '" style="font-size: 8px;"></i></div>' +
                        '<div class="session-title">' + event.title + '</div>' +
                       '</div>';
            }

            function getWeekEventTemplate(event) {
                var isOnline = event.raw.isOnline === 'true';
                var iconClass = isOnline ? 'fa-wifi' : 'fa-building';
                var sessionClass = isOnline ? 'online-session' : 'offline-session';

                return '<div class="session-template ' + sessionClass + '" style="height: 100%;">' +
                        '<div class="session-icon"><i class="fas ' + iconClass + '" style="font-size: 8px;"></i></div>' +
                        '<div class="session-title">' + event.title + '</div>' +
                       '</div>';
            }

        function getPopupDetailTemplate(event) {
            var isOnline = event.raw.isOnline === 'true';
            var iconClass = isOnline ? 'fa-wifi' : 'fa-building';
            var locationText = isOnline ? 'Online Session' : 'Offline Session';
            var locationColor = isOnline ? '#248a6b' : '#15479e';

            var start = new Date(event.start);
            var end = new Date(event.end);

            var formattedDate = start.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            var formattedStartTime = start.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });

            var formattedEndTime = end.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });

            return '<div class="p-3">' +
                   '<h4 class="mb-3">' + event.title + '</h4>' +
                   '<div class="mb-2"><i class="fas fa-chalkboard-teacher me-2"></i> <strong>Teacher:</strong> ' + event.raw.teacher + '</div>' +
                   '<div class="mb-2"><i class="fas fa-calendar-day me-2"></i> <strong>Date:</strong> ' + formattedDate + '</div>' +
                   '<div class="mb-2"><i class="fas fa-clock me-2"></i> <strong>Time:</strong> ' + formattedStartTime + ' - ' + formattedEndTime + '</div>' +
                   '<div class="mb-2"><i class="fas fa-hourglass-half me-2"></i> <strong>Duration:</strong> ' + event.raw.duration + '</div>' +
                   '<div class="mt-3 pt-2 border-top">' +
                   '<span style="color: ' + locationColor + ';"><i class="fas ' + iconClass + ' me-2"></i> ' + locationText + '</span>' +
                   '<div class="mt-2"><a href="/Students/Session/Details/' + event.id + '" class="btn btn-outline-info">Details</a></div>' +
                   '</div>' +
                   '</div>';
        }

            // Initialize calendar
            var calendar = new tui.Calendar("#calendar", {
                defaultView: "month",
                taskView: false,
                useDetailPopup: true,
                isReadOnly: true,
                usageStatistics: false,
                month: {
                    daynames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    startDayOfWeek: 0,
                    narrowWeekend: false
                },
                week: {
                    daynames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    hourStart: 8,
                    hourEnd: 20
                },
                template: {
                    monthDayname: function(dayname) {
                        return '<span class="fw-bold">' + dayname.label + '</span>';
                    },
                    monthGridHeader: function(model) {
                        var date = new Date(model.date);
                        return '<span class="tui-full-calendar-weekday-grid-date">' + date.getDate() + '</span>';
                    },
                    monthMoreTitleDate: function(date) {
                        var day = date.split('-')[2];
                        return '<span class="fw-bold">' + day + '</span> more';
                    },
                    monthMoreClose: function() {
                        return '<i class="fas fa-times"></i>';
                    },
                    monthGridHeaderExceed: function(hiddenEvents) {
                        return '<span class="badge bg-primary rounded-pill">+' + hiddenEvents + '</span>';
                    },
                    monthDayname: function(model) {
                        return (
                            '<span class="tui-full-calendar-dayname-name">' + model.label + '</span>'
                        );
                    },
                    weekDayname: function(model) {
                        return '<span class="tui-full-calendar-dayname-name">' + model.dayName + '</span>';
                    },
                    timegridDisplayPrimaryTime: function(time) {
                        return time.hour + ':00';
                    },
                    timegridCurrentTime: function(timezone) {
                        var templates = [];
                        var date = new Date();

                        templates.push('<div class="tui-full-calendar-timegrid-timezone">');
                        templates.push(date.getHours() + ':' + date.getMinutes());
                        templates.push('</div>');

                        return templates.join('');
                    },
                    popupDetailDate: function(isAllDay, start, end) {
                        var isSameDate = start.getDate() === end.getDate();

                        if (isSameDate) {
                            return new Date(start).toLocaleString('en-US', {
                                weekday: 'long',
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            });
                        }

                        return new Date(start).toLocaleDateString() + ' - ' + new Date(end).toLocaleDateString();
                    },
                    popupDetailBody: function(schedule) {
                        return getPopupDetailTemplate(schedule);
                    },
                    milestone: function(schedule) {
                        return '<span class="tui-full-calendar-milestone-dot"></span>' +
                             '<span style="background-color: ' + schedule.bgColor + '">' + schedule.title + '</span>';
                    },
                    monthGridHeaderExceed: function(hiddenSchedules) {
                        return '<span class="tui-full-calendar-weekday-grid-more-schedules">+' + hiddenSchedules + ' more</span>';
                    },
                    monthGridFooterExceed: function(hiddenSchedules) {
                        return '<span class="tui-full-calendar-weekday-grid-more-schedules">+' + hiddenSchedules + ' more</span>';
                    },
                    monthMoreClose: function() {
                        return '<span class="tui-full-calendar-icon tui-full-calendar-ic-close"></span>';
                    },
                    monthMoreTitleDate: function(date, dayname) {
                        var day = date.split('-')[2];
                        return '<span class="tui-full-calendar-month-more-title-day">' + day + '</span> <span class="tui-full-calendar-month-more-title-day-label">' + dayname + '</span>';
                    },
                    monthMoreViewClose: function() {
                        return '<span class="tui-full-calendar-icon tui-full-calendar-ic-close"></span>';
                    },
                    weekDayname: function(model) {
                        return '<span class="tui-full-calendar-dayname-date">' + model.date + '</span>&nbsp;&nbsp;<span class="tui-full-calendar-dayname-name">' + model.dayName + '</span>';
                    },
                    monthDayname: function(model) {
                        return model.label.slice(0, 3);
                    },
                    // Custom templates for events
                    time: function(schedule) {
                        return getWeekEventTemplate(schedule);
                    },
                    timegridDisplayPrimaryTime: function(time) {
                        var meridiem = time.hour < 12 ? 'AM' : 'PM';
                        var displayHour = time.hour % 12 || 12;
                        return displayHour + ' ' + meridiem;
                    },
                    monthGridHeaderExceed: function(hiddenEvents) {
                        return '+' + hiddenEvents;
                    },
                    monthMoreViewTitle: function(date) {
                        var dateObj = new Date(date);
                        return dateObj.toLocaleDateString('en-US', {
                            month: 'long',
                            day: 'numeric'
                        });
                    },
                    monthMoreClose: function() {
                        return '<i class="fas fa-times"></i>';
                    },
                    // Custom event templates
                    time: function(event) {
                        return getWeekEventTemplate(event);
                    },
                    milestone: function(event) {
                        return '<span style="color:red;"><i class="fas fa-flag"></i> ' + event.title + '</span>';
                    },
                    allday: function(event) {
                        return getMonthEventTemplate(event);
                    },
                    schedule: function(event) {
                        return getMonthEventTemplate(event);
                    }
                }
            });

            // Store all session data
            const allSessions = [];

            // Process session data from the model
        @foreach (var session in Model)
        {
            <text>
                                        const startDateTime_@(session.SessionID) = new Date('@session.StartDateTime.ToString("yyyy-MM-ddTHH:mm:ss")');
                                        let endDateTime_@(session.SessionID);

                @if (session.Duration != null)
                {
                    <text>
                                                                // Parse duration and add to start time
                                                                const durationParts_@(session.SessionID) = '@session.Duration?.ToString(@"hh\:mm")'.split(':');
                                                                const hours_@(session.SessionID) = parseInt(durationParts_@(session.SessionID)[0]);
                                                                const minutes_@(session.SessionID) = parseInt(durationParts_@(session.SessionID)[1]);

                                                                endDateTime_@(session.SessionID) = new Date(startDateTime_@(session.SessionID));
                                                                endDateTime_@(session.SessionID).setHours(endDateTime_@(session.SessionID).getHours() + hours_@(session.SessionID));
                                                                endDateTime_@(session.SessionID).setMinutes(endDateTime_@(session.SessionID).getMinutes() + minutes_@(session.SessionID));
                    </text>
                }
                else
                {
                    <text>
                                                                // Default to 1 hour if duration is not provided
                                                                endDateTime_@(session.SessionID) = new Date(startDateTime_@(session.SessionID));
                                                                endDateTime_@(session.SessionID).setHours(endDateTime_@(session.SessionID).getHours() + 1);
                    </text>
                }

                                        // Store session data for searching
                                        allSessions.push({
                                            id: '@session.SessionID',
                                            calendarId: '@(session.IsOnline ? "online" : "offline")',
                                            title: '@session.SubjectName',
                                            body: 'Teacher: @session.GroupTeacherName',
                                            category: 'time',
                                            start: startDateTime_@(session.SessionID),
                                            end: endDateTime_@(session.SessionID),
                                            isReadOnly: true,
                                            raw: {
                                                teacher: '@session.GroupTeacherName',
                                                isOnline: @(session.IsOnline ? "true" : "false").toString(),
                                                location: '@(session.IsOnline ? "Online" : "Offline")',
                                                duration: '@(session.Duration?.ToString(@"hh\:mm") ?? "01:00")'
                                            }
                                        });
            </text>
        }

            // Set calendar color categories
            calendar.setCalendarColor('online', {
                backgroundColor: 'rgba(19, 194, 150, 0.05)',
                borderColor: '#13c296',
                dragBackgroundColor: '#13c296',
                color: '#212b36'
            });

            calendar.setCalendarColor('offline', {
                backgroundColor: 'rgba(74, 108, 247, 0.05)',
                borderColor: '#4a6cf7',
                dragBackgroundColor: '#4a6cf7',
                color: '#212b36'
            });

            // Add all sessions to calendar
            calendar.createSchedules(allSessions);

            // Update header date display
            function updateDateRangeDisplay() {
                const currentDate = calendar.getDate();
                const currentView = calendar.getViewName();

                let dateRangeText = '';

                if (currentView === 'month') {
                    dateRangeText = currentDate.toLocaleString('en-US', { month: 'long', year: 'numeric' });
                } else if (currentView === 'week') {
                    const weekStart = new Date(currentDate);
                    weekStart.setDate(currentDate.getDate() - currentDate.getDay());

                    const weekEnd = new Date(weekStart);
                    weekEnd.setDate(weekStart.getDate() + 6);

                    dateRangeText = weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) +
                                    ' - ' +
                                    weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                } else if (currentView === 'day') {
                    dateRangeText = currentDate.toLocaleDateString('en-US', {
                        weekday: 'long',
                        month: 'long',
                        day: 'numeric',
                        year: 'numeric'
                    });
                }

                // Create or update the date display in the header
                let headerDateDisplay = document.querySelector('.header-date-display');

                if (!headerDateDisplay) {
                    headerDateDisplay = document.createElement('div');
                    headerDateDisplay.className = 'header-date-display text-white ms-3';
                    document.querySelector('.calendar-header h4').after(headerDateDisplay);
                }

                headerDateDisplay.textContent = dateRangeText;
            }

            // Function to handle search filtering
            function handleSearch() {
                const searchQuery = document.getElementById('sessionSearch').value.toLowerCase();
                let filteredSessions = [];

                if (searchQuery === '') {
                    // If search is empty, show all sessions
                    filteredSessions = allSessions;
                    document.getElementById('emptyMessage').style.display = 'none';
                } else {
                    // Filter sessions based on search query
                    filteredSessions = allSessions.filter(session => {
                        const titleMatch = session.title.toLowerCase().includes(searchQuery);
                        const teacherMatch = session.raw.teacher.toLowerCase().includes(searchQuery);
                        const locationMatch = session.raw.location.toLowerCase().includes(searchQuery);

                        return titleMatch || teacherMatch || locationMatch;
                    });

                    // Show/hide empty message
                    if (filteredSessions.length === 0) {
                        document.getElementById('emptyMessage').style.display = 'block';
                    } else {
                        document.getElementById('emptyMessage').style.display = 'none';
                    }
                }

                // Clear calendar and add filtered sessions
                calendar.clear();
                calendar.createSchedules(filteredSessions);
                calendar.render();
            }

            // Set up search handler
            document.getElementById('sessionSearch').addEventListener('keyup', handleSearch);

            // Set up calendar view controls
            document.getElementById('monthView').addEventListener('click', function() {
                setActiveViewButton(this);
                calendar.changeView('month');
                updateDateRangeDisplay();
            });

            document.getElementById('weekView').addEventListener('click', function() {
                setActiveViewButton(this);
                calendar.changeView('week');
                updateDateRangeDisplay();
            });

            document.getElementById('dayView').addEventListener('click', function() {
                setActiveViewButton(this);
                calendar.changeView('day');
                updateDateRangeDisplay();
            });

            document.getElementById('todayBtn').addEventListener('click', function() {
                calendar.today();
                updateDateRangeDisplay();
            });

            document.getElementById('prevBtn').addEventListener('click', function() {
                calendar.prev();
                updateDateRangeDisplay();
            });

            document.getElementById('nextBtn').addEventListener('click', function() {
                calendar.next();
                updateDateRangeDisplay();
            });

            function setActiveViewButton(button) {
                document.querySelectorAll('.btn-calendar-view').forEach(btn => {
                    btn.classList.remove('active');
                });
                button.classList.add('active');
            }

            // Initialize date display
            updateDateRangeDisplay();
        });
    </script>
}