@using XCourse.Core.DTOs.StudentDTOs
@model XCourse.Core.ViewModels.StudentsViewModels.SessionDetailsViewModel

@{

    ViewData["Title"] = "Session Details";

    bool sessionPassed = DateTime.Now > Model.Session.EndDateTime;
    bool hasAttended = Model.Attendances != null && Model.Attendances.HasAttended.HasValue && Model.Attendances.HasAttended.Value;
    bool hasFeedback = hasAttended && Model.Attendances.Feedback != null;
    bool hasExamMark = hasAttended && Model.Attendances.ClassWorkGrade != null;
    bool hasHomeMark = hasAttended && Model.Attendances.HomeWorkGrade != null;
    bool isOnline = Model.Session.Group.IsOnline;
    var startTime = Model.Session.StartDateTime.ToString("yyyy-MM-ddTHH:mm:ss");
}

@section Styles {
<link rel="stylesheet" href="~/css/Students/SessionDetails.css">
}

<div class="session">
    <!-- 1. Profile Section - Improved positioning -->
    <section class="session__profile">
        <div class="session__profile__container"
        style="background-image : url('@(Model.Session.Group.CoverPicture != null ? "data:image/*;base64," + Convert.ToBase64String(Model.Session.Group.CoverPicture) : Url.Content("~/images/default_Group.jpg"))');">
            <div class="session__profile__overlay"></div>
            <div class="session__profile__header">
                <img src="@(Model.Session?.Group?.Teacher?.AppUser?.ProfilePicture != null ? "data:image/*;base64," + Convert.ToBase64String(Model.Session?.Group?.Teacher?.AppUser?.ProfilePicture) : Url.Content("~/images/default_profile.png"))"
                alt="Student Profile"
                class="session__profile__image">

                <div class="session__profile__details">
                    <h2 class="session__profile__name">@Model.Session?.Group?.Teacher?.AppUser?.FirstName @Model.Session?.Group?.Teacher?.AppUser?.LastName</h2>
                    <div class="session__profile__info">
                        <span>@Model.Session?.Group?.Teacher?.AppUser?.Email</span>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- 2. Info Section -->
    <section class="session__info">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-8">
                    <div class="session__info-item session__info-time">
                        Start: @Model.Session.StartDateTime.ToString("MMM dd, yyyy - h:mm tt")
                    </div>
                    <div class="session__info-item session__info-time">
                        Duration: @(Model.Session.Duration.HasValue
                        ? Model.Session.Duration.Value.ToString(@"hh\:mm")
                        : "N/A")
                    </div>
                    <!-- Countdown Timer -->
                    <div class="session__info-item session__info-counter">
                        <span id="sessionCounter" class="session__info-counter-value">00:00:00</span>
                    </div>
                    @if (isOnline)
                    {

                        <div class="session__info-item" id="session-url"
                        data-start="@Model.Session.StartDateTime.ToString("o")"
                        data-end="@Model.Session.EndDateTime.ToString("o")">
                            <a href="@Model.Session.URL" class="session__info-link">
                                Join Session <i class="fa-solid fa-arrow-up-right-from-square"></i>
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="session__info-item session__info-location">
                            @Model.Session.Address.Street St, @Model.Session.Address.City City, @Model.Session.Address.Governorate
                        </div>
                    }
                </div>

                @if (!isOnline)
                {
                    <div class="col-md-4 d-flex justify-content-center align-items-center">
                        <div class="session__info-map">
                            @if (Model.Session.Location != null)
                            {
                                <partial name="_MapPartialView" model="new MapInfoDTO() { Key=Model.MapKey, OriginX=Model.Session.Location.X, OriginY=Model.Session.Location.Y }" style="width:100%; height:100%" />
                            }
                            else
                            {
                                <i class="fa-solid fa-map-location-dot"></i>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>

    @if (DateTime.Now > Model.Session.StartDateTime)
    {
        <!-- 3. Details Section - Changed to vertical table -->
        <section class="session__details">
            @if (Model.Attendances != null && Model.Attendances.HasAttended.HasValue )
            {
                <table class="session__details-table">
                    <tbody>
                        <tr>
                            <th>Class Work Mark</th>
                            @if (Model.Attendances.ClassWorkGrade > 0)
                            {
                                <td>@Model.Attendances.ClassWorkGrade/100</td>
                            }
                            else
                            {
                                <td>N/A</td>
                            }
                        </tr>
                        <tr>
                            <th>Attendance</th>
                            <td>
                                @if (hasAttended)
                                {
                                    <div class="session__details-checkbox checked"></div>
                                }
                                else
                                {
                                    <div class="session__details-checkbox"></div>
                                }
                            </td>
                        </tr>
                        <tr>
                            <th>Home Mark Grade</th>
                            @if (Model.Attendances.HomeWorkGrade > 0)
                            {
                                <td>@Model.Attendances.HomeWorkGrade/100</td>
                            }
                            else
                            {
                                <td>N/A</td>
                            }
                        </tr>
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">You are absent.</div>
            }
        </section>

        <!-- 4. Feedback Section - Added star rating -->
        <section class="session__feedback">
            <div class="session__feedback-header">
                <h2 class="session__feedback-title">Feedback</h2>
                <div id="feedback-btn-cont">
                @if (Model.Attendances != null && Model.Attendances.HasAttended.HasValue)
                {
                    @if (hasFeedback)
                    {
                        <button class="session__feedback-add" onclick="openEditFeedbackModal(this)">
                            <i class="fa-solid fa-pen-to-square"></i> Edit Feedback
                        </button>
                    }
                    else
                    {
                        <button class="session__feedback-add" onclick="openAddFeedbackModal()">
                            <i class="fa-solid fa-plus"></i> Add Feedback
                        </button>
                    }
                }
                </div>
            </div>

            <div class="session__feedback-list" id="feedback-container">
                <!-- Feedback Item 1 -->
                <div class="session__feedback-item">
                    @if (hasFeedback)
                    {
                        <div class="session__feedback-rating">
                            <div class="session__feedback-stars">
                                @for (int i = 0; i < (Model.Attendances?.Rating ?? 0); i++)
                                {
                                    <i class="fa-solid fa-star"></i>
                                }
                                @for (int i = (int)(Model.Attendances.Rating ?? 0); i < 5; i++)
                                {
                                    <i class="fa-regular fa-star"></i>
                                }
                            </div>
                        </div>
                        <div class="session__feedback-text">
                            @Model.Attendances.Feedback
                        </div>
                        <div class="session__feedback-meta">
                            <div class="session__feedback-date"></div>
                            <div class="session__feedback-actions">
                                <button class="session__feedback-delete" onclick="openDeleteFeedbackModal()">
                                    <i class="fa-solid fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>No Feedback Yet</div>
                    }
                </div>
            </div>
        </section>

        <!-- Add/Edit Feedback Modal - Added star rating -->
        <div class="session__modal" id="feedbackModal">
            <div class="session__modal-content">
                <h3 class="session__modal-title">Add Feedback</h3>
                <button class="session__modal-close" onclick="closeModal('feedbackModal')">
                    <i class="fa-solid fa-times"></i>
                </button>
                <div class="error-message-container d-none" id="error-message-container">
                    <i class="fa-solid fa-xmark"></i>
                    <span id="error-message" class="error-message">Something went wrong </span>
                </div>
                <div class="session__modal-rating">
                    <div class="session__modal-stars" id="session-rating">
                        <i class="fa-solid fa-star session__modal-star" data-rating="1" onclick="setRating(1)"></i>
                        <i class="fa-solid fa-star session__modal-star" data-rating="2" onclick="setRating(2)"></i>
                        <i class="fa-solid fa-star session__modal-star" data-rating="3" onclick="setRating(3)"></i>
                        <i class="fa-solid fa-star session__modal-star" data-rating="4" onclick="setRating(4)"></i>
                        <i class="fa-solid fa-star session__modal-star" data-rating="5" onclick="setRating(5)"></i>
                    </div>
                </div>

                <textarea class="session__modal-textarea" placeholder="Enter your feedback here..." id="feedback-textarea"></textarea>
                <div class="session__modal-actions">
                    <button class="session__modal-cancel" onclick="closeModal('feedbackModal')">Cancel</button>
                    <button class="session__modal-save" id="save-feedback-btn" onclick="saveFeedback()">Save</button>
                </div>
            </div>
        </div>

        <!-- Delete Confirmation Modal -->
        <div class="session__modal" id="deleteModal">
            <div class="session__modal-content">
                <h3 class="session__modal-title">Delete Feedback</h3>
                <button class="session__modal-close" onclick="closeModal('deleteModal')">
                    <i class="fa-solid fa-times"></i>
                </button>
                <div class="session__modal-message">
                    Are you sure you want to delete this feedback?
                </div>
                <div class="session__modal-actions">
                    <button class="session__modal-cancel-delete" onclick="closeModal('deleteModal')">Cancel</button>
                    <button class="session__modal-confirm" id="delete-feedback-btn" onclick="deleteFeedback()">Delete</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <section class="session__details">
            <div class="alert alert-info">This session has not started yet.</div>
		</section>
    }
</div>

@section Scripts {
    <script>
        const sessionId = @Model.Session.ID;
        const studentId = @(Model.Attendances != null ? Model.Attendances.StudentID : 0);

        // utils functions
        async function sendAsyncRequest(url, method, requestBody) {
            try {
                freezeButton(method === "POST" ? "save-feedback-btn" : "delete-feedback-btn");
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    },
                    body: JSON.stringify(requestBody)
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                return data;
            } catch (error) {
                closeModal('feedbackModal');
                if (typeof showErrorToast === 'function') {
                    showErrorToast("Error", "Request failed: " + error.message, 3);
                }
                return new Error(error);
            }
        }

        async function submitFeedback(request) {
            freezeButton("save-feedback-btn");

            let btnContainer =document.getElementById("feedback-btn-cont");
            

            try {
                let response = await sendAsyncRequest("https://localhost:7054/Students/Session/SaveFeedBack", "POST", request);
                if (response.isValid == true) {
                    if (typeof showSuccessToast === 'function') {
                        showSuccessToast("OK", "Feedback Saved Successfully", 3);
                    }
					// 1. Change the button to Edit Feedback
					btnContainer.innerHTML=`
                            <button class="session__feedback-add" onclick="openEditFeedbackModal(this)">
							<i class="fa-solid fa-pen-to-square"></i> Edit Feedback
						    </button>`

                    freeButton("save-feedback-btn");
                    // 2. Append to the added feedback
                    let feedbackContainer = document.getElementById("feedback-container");
                    if (feedbackContainer) {
                        let starsInnerHTML = ``;
                        for (let i = 0; i < Number(request.rating); i++) {
                            starsInnerHTML += `<i class="fa-solid fa-star active"></i>`;
                        }
                        for (let i = 0; i < Number(5 - request.rating); i++) {
                            starsInnerHTML += `<i class="fa-regular fa-star"></i>`;
                        }
                        feedbackContainer.innerHTML =
                            `
                    <!-- Feedback Item 1 -->
                    <div class="session__feedback-item">
                    <div class="session__feedback-rating">
                                    <div class="session__feedback-stars">
                                    ${starsInnerHTML}
                                    </div>
                                </div>
                                <div class="session__feedback-text">
                                ${request.feedback}
                                </div>
                                <div class="session__feedback-meta">
                                    <div class="session__feedback-date"></div>
                                    <div class="session__feedback-actions">
                                        <button class="session__feedback-delete" onclick="openDeleteFeedbackModal()">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                    `;
                    }
                    return response;
                } else {
                    if (typeof showErrorToast === 'function') {
                        showErrorToast("Error", "Something went wrong while saving feedback.", 3);
                    }
                    return response;
                }
            } catch (err) {
                freeButton("save-feedback-btn");
                if (typeof showErrorToast === 'function') {
                    showErrorToast("Error", "Something went wrong while saving feedback.", 3);
                }
                return err;
            }
        }

        function getFeedbackData() {
            let feedbackTextarea = document.getElementById("feedback-textarea");
            if (!feedbackTextarea) return null;

            let sessionRatingStars = document.querySelectorAll("#session-rating .active");

            let feedbackRequest = {
                feedback: feedbackTextarea.value,
                rating: sessionRatingStars.length,
                sessionId: sessionId,
                studentId: studentId
            }

            console.log(feedbackRequest);
            return feedbackRequest;
        }

        // Modal functionality
        function openAddFeedbackModal() {
            freeButton("save-feedback-btn");
            const modal = document.getElementById('feedbackModal');
            if (!modal) return;

            modal.classList.add('active');
            const titleEl = document.querySelector('#feedbackModal .session__modal-title');
            const textareaEl = document.querySelector('#feedbackModal .session__modal-textarea');

            if (titleEl) titleEl.textContent = 'Add Feedback';
            if (textareaEl) textareaEl.value = '';

            resetStars();
        }

        function openEditFeedbackModal(button) {
            if (!button) return;

            freeButton("save-feedback-btn");
            const errorContainer = document.getElementById("error-message-container");
            if (errorContainer) {
                errorContainer.classList.add("d-none");
            }

            const modal = document.getElementById('feedbackModal');
            if (!modal) return;

            modal.classList.add('active');

            const titleEl = document.querySelector('#feedbackModal .session__modal-title');
            if (titleEl) titleEl.textContent = 'Edit Feedback';

            const feedbackItem = button.closest('.session__feedback-item');
            if (!feedbackItem) return;

            const feedbackTextEl = feedbackItem.querySelector('.session__feedback-text');
            const feedbackText = feedbackTextEl ? feedbackTextEl.textContent.trim() : '';

            const starEls = feedbackItem.querySelectorAll('.fa-solid.fa-star');
            const stars = starEls ? starEls.length : 0;

            const textareaEl = document.querySelector('#feedbackModal .session__modal-textarea');
            if (textareaEl) textareaEl.value = feedbackText;

            resetStars();
            setRating(stars);
        }

        function openDeleteFeedbackModal() {
            freeButton("delete-feedback-btn");
            const modal = document.getElementById('deleteModal');
            if (modal) modal.classList.add('active');
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) modal.classList.remove('active');
        }

        function resetStars() {
            const stars = document.querySelectorAll('.session__modal-star');
            stars.forEach(star => {
                star.classList.remove('active');
            });
        }

        function setRating(rating) {
            resetStars();
            const stars = document.querySelectorAll('.session__modal-star');
            for (let i = 0; i < rating && i < stars.length; i++) {
                stars[i].classList.add('active');
            }
        }

        async function saveFeedback() {
            let request = getFeedbackData();

            if (!request) {
                renderFeedbackErrorMessage("Something went wrong");
                return;
            }

            if (request.feedback.trim() === "") {
                renderFeedbackErrorMessage("Feedback can't be empty");
                return;
            }

            // Add current dateTime in readable format
            request.dateTime = new Date().toLocaleString();

            const response = await submitFeedback(request);

            if (response?.isValid === true) {
                closeModal('feedbackModal');
            } else {
                renderFeedbackErrorMessage("Something went wrong while saving feedback.");
            }
        }

        function renderFeedbackErrorMessage(message) {
            const errorContainer = document.getElementById("error-message-container");
            const errorMessage = document.getElementById("error-message");

            if (!errorContainer || !errorMessage) return;

            errorContainer.classList.remove("d-none");
            errorMessage.innerHTML = message;

            setTimeout(() => {
                errorContainer.classList.add("d-none");
            }, 4000);
        }

        async function deleteFeedback() {
			let btnContainer =document.getElementById("feedback-btn-cont");

            let request = {
                studentId: studentId,
                sessionId: sessionId
            }
            console.log(request);
            try {
                freezeButton("delete-feedback-btn");
                const response = await sendAsyncRequest("https://localhost:7054/Students/Session/SaveFeedback", "POST", request);
                if (response.isValid) {
                    if (typeof showSuccessToast === 'function') {
                        showSuccessToast("OK", "Feedback Deleted Successfully", 3);
                    }

                    btnContainer.innerHTML=`
                        <button class="session__feedback-add" onclick="openAddFeedbackModal()">
                            <i class="fa-solid fa-plus"></i> Add Feedback
                        </button>
                        
                    `
                    // remove the element from the DOM
                    let feedbackContainer = document.getElementById("feedback-container");
                    if (feedbackContainer) feedbackContainer.innerHTML = ``;

                    closeModal('deleteModal');
                    freeButton("delete-feedback-btn");
                } else {
                    if (typeof showErrorToast === 'function') {
                        showErrorToast("Error", "Can't Delete this Feedback", 3);
                    }

                    closeModal('deleteModal');
                    freeButton("delete-feedback-btn");
                }
            } catch (err) {
                console.log(err);
                freeButton("delete-feedback-btn");
                closeModal('deleteModal');

                if (typeof showErrorToast === 'function') {
                    showErrorToast("Error", "Can't Delete this Feedback", 3);
                }
            }
        }

   
        document.addEventListener("DOMContentLoaded", function () {
            const sessionElement = document.getElementById("session-url");
            const link = sessionElement?.querySelector("a");

            if (!sessionElement || !link) return;

            const start = new Date(sessionElement.dataset.start);
            const end = new Date(sessionElement.dataset.end);

             const now = new Date();
                if (now >= start && now <= end) {
                    enableLink(link);
                } else {
                    disableLink(link);
                }

            setInterval(() => {
                const now = new Date();
                if (now >= start && now <= end) {
                    enableLink(link);
                } else {
                    disableLink(link);
                }
            }, 1000);
        });

        function disableLink(link) {
            link.classList.add("disabled-link"); 
            link.style.pointerEvents = "none";
            link.style.opacity = "0.5";
            link.setAttribute("aria-disabled", "true");
        }

        function enableLink(link) {
            link.classList.remove("disabled-link");
            link.style.pointerEvents = "auto";
            link.style.opacity = "1";
            link.removeAttribute("aria-disabled");
        }



        function freezeButton(id) {
            const button = document.getElementById(id);
            if (!button) return;

            button.setAttribute("disabled", "true");
        }

        function freeButton(id) {
            const button = document.getElementById(id);
            if (!button) return;

            button.removeAttribute("disabled");
        }

        /**
         * Starts a countdown timer to the target time.
         * param {string} targetTime - A string representation of the target time.
         */
        function startCountdown(targetTime) {
            const countdownElement = document.getElementById('sessionCounter');
            if (!countdownElement) return;

            function updateCountdown() {
                const now = new Date().getTime();
                const targetDate = new Date(targetTime).getTime();
                let diff = targetDate - now;

                // If the target time has passed, set diff to 0.
                if (diff < 0) {
                    diff = 0;
                }

                const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                countdownElement.textContent =
                    (days > 0 ? days + 'd ' : '') +
                    (hours < 10 ? '0' + hours : hours) + ':' +
                    (minutes < 10 ? '0' + minutes : minutes) + ':' +
                    (seconds < 10 ? '0' + seconds : seconds);

                if (diff <= 0) {
                    clearInterval(interval);
                }
            }

            updateCountdown();
            const interval = setInterval(updateCountdown, 1000);
        }

        // Start the countdown to the session's start time.
        startCountdown('@startTime');
        
    </script>
}