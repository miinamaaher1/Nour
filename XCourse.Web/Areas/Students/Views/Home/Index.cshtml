@model XCourse.Core.ViewModels.StudentsViewModels.HomeViewModel

@{
    ViewData["Title"] = "Home";
}

@section Styles {
    <link rel="stylesheet" href="~/Content/tui-calendar/tui-calendar.min.css">
    <link  rel="stylesheet" href="~/css/Students/StudentsHomeGroups.css"/>
    }
<div class="col-12">


    <!-- Announcement Notification Button -->
    <div class="circle-btn btn-top-right-offset announcement-btn" id="announcement-notifications">
        <i class="fa-solid fa-bell"></i>
        <div class="notification-badge" id="announcement-notifications-number"></div>
    </div>


    <!-- Modal for announcements -->
    <div class="announcements-modal" id="announcementsModal">
        <div class="announcements-modal__content">
            <div class="announcements-modal__header">
                <h2 class="announcements-modal__title">Announcements</h2>
                <button class="announcements-modal__close" id="closeAnnouncementsBtn">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="announcements-modal__body">
                <div class="announcement-list">
                    <!-- Announcement 1 -->

                    @foreach(var Announcement in Model.Announcements)
                    {

                        <div class="announcement-item announcement-item--important">
                            <div class="announcement-item__header">
                                <div>
                                    <h3 class="announcement-item__title">@Announcement.Title</h3>
                                    @if(Announcement!=null && Announcement.GroupSubjectNames!=null)
                                    {
                                        <div class="announcement-item__groups">
                                            @foreach (var group in Announcement.GroupSubjectNames!)
                                            {
                                                <a asp-action="Details" asp-controller="Group" asp-area="Students" asp-route-Id="@group.GroupID" class="announcement-item__group">
                                                    <i class="fas fa-users"></i>&nbsp;
                                                    @group.GroupSubject Group
                                                </a>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="announcement-item__date">
                                <i class="far fa-calendar-alt"></i>&nbsp;
                                @Announcement.DateTime?.ToString("dddd, MMMM dd yyyy - hh:mm tt")
                            </div>
                            <div class="announcement-item__body">
                                @Announcement.Body
                            </div>
                            @if (Announcement.IsImportant)
                            {
                                <div class="announcement-item__badge">
                                    <i class="fas fa-exclamation-circle"></i> &nbsp;
                                    Important
                                </div>
                            }
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>




    <!--Upcoming sessions-->
    <div class="container col-11">
        <div class="group-carousel container">
            <div class="group-carousel__container">
                <div class="session-section__title">
                    <h2>Upcoming Sessions</h2>
                    <a asp-action="Index" asp-controller="Session" asp-area="Students" class="view-all-link"> View All</a>
                </div>
                <div class="group-carousel__track" id="sessionsCarouselTrack">
                    <!-- Session 1 -->
                    @foreach(var session in Model.UpcomingSessions)
                    {
                        <div class="group-carousel__slide">
							<a style="text-decoration:none;" asp-action="Details" asp-controller="Session" asp-area="Students" asp-route-Id="@session.SessionID">
                            <div class="session-card">
                                <div class="session-card__header">
                                    @if (session.IsOnline)
                                    {
                                        <div class="session-card__status session-card__status--online">
                                                <i class="fas fa-circle"></i>&nbsp;
                                            Online
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="session-card__status session-card__status--offline">
                                                <i class="fas fa-circle"></i> &nbsp;
                                            Offline
                                        </div>
                                    }
                                 
                                    <div class="session-card__duration">
                                            <i class="fa-solid fa-hourglass-half"></i>&nbsp;
                                            @session.Duration!.Value.ToString(@"hh\:mm")
                                    </div>
                                </div>
                                    <div class="session-card__date">@session.StartDateTime.ToString("MMMM dd, yyyy - HH:mm")</div>
                                <div class="session-card__subject">@session.SubjectName</div>
                                <div class="session-card__teacher">
                                    <div class="session-card__teacher-img">
                                        <img src="@(session.TeacherProfilePicture != null ? "data:image/*;base64," + Convert.ToBase64String(session.TeacherProfilePicture) : Url.Content("~/images/default_user.svg"))"
                                             alt="Teacher">
                                    </div>
                                    <div class="session-card__teacher-name">@session.GroupTeacherName</div>
                                </div>
                            </div>
                            </a>
                        </div>
                    }


                </div>
            </div>

            <div class="group-carousel__controls">
                <button class="group-carousel__button" id="sessionPrevButton">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button class="group-carousel__button" id="sessionNextButton">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>

            <div class="group-carousel__dots" id="sessionsCarouselDots">
                <!-- Dots will be added here via JavaScript -->
            </div>
        </div>
    </div>

    <!-- Recommended Groups -->
    <div class="container col-11">
        <div class="group-carousel container">
            <div class="container">
                <div class="group-section__title">
                    <h2>Recommended Groups</h2>
                    <a  asp-action="Recommended" asp-controller="Group" asp-area="Students" class="view-all-link"> View All</a>
                </div>

                <div class="group-carousel">
                    <div class="group-carousel__container">
                        <div class="group-carousel__track" id="carouselTrack">

                            @foreach (var group in Model.RecommendedGroups)
                            {

                                <!-- Group 1 -->
                                <div class="group-carousel__slide">
                                    <a  style="text-decoration:none;" asp-action="Preview" asp-controller="Group" asp-area="Students" asp-route-Id="@group.GroupID">
                                    <div class="group-card">
                                        <div class="group-card__image">
                                            <img 
                                            src="@(group.GroupPicture != null ? "data:image/*;base64," + Convert.ToBase64String(group.GroupPicture) : Url.Content("~/images/default_group.svg"))"
                                            alt="@group.SubjectName Group">
                                            <div class="group-card__teacher">
                                                <div class="group-card__teacher-img">
                                                    <img src="@(group.TeacherProfilePicture != null ? "data:image/*;base64," + Convert.ToBase64String(group.TeacherProfilePicture) : Url.Content("~/images/default_user.svg"))"
                                                    alt="@group.GroupTeacherName">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="group-card__content">
                                            <div class="group-card__title">@group.GroupTeacherName</div>
                                            <div class="group-card__subject">@group.SubjectName</div>
                                            <div class="group-card__features">
                                                @if (group.IsOnline)
                                                {
                                                    <span class="group-card__feature">
                                                            <i class="fas fa-laptop"></i> &nbsp; Online
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="group-card__feature">
                                                            <i class="fas fa-building"></i> &nbsp; Offline
                                                    </span>
                                                }
                                                @if(group.IsGirlsOnly)
                                                {
                                                    <span class="group-card__feature">
                                                            <i class="fas fa-female"></i> &nbsp; Girls Only
                                                    </span>
                                                }
                                            </div>
                                        <div class="group-card__footer">
                                            <div class="group-card__price">@group.PricePerSession EGP</div>
                                            <div class="group-card__capacity">
                                                        <i class="fas fa-users"></i>&nbsp;
                                                @group.CurrentStudentsCount/@group.MaxStudents
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                </a>

                            </div>

                            }
                  
                        </div>
                    </div>

                    <div class="group-carousel__controls">
                        <button class="group-carousel__button" id="prevButton">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="group-carousel__button" id="nextButton">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <div class="group-carousel__dots" id="carouselDots">
                        <!-- Dots will be added here via JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    
</div>

@section Scripts {
    <script src="@Url.Content("~/Scripts/tui-code-snippet.min.js")"></script>
    <script src="@Url.Content("~/Scripts/tui-calendar.min.js")"></script>
    <script>
        // Function to initialize the carousel
        function initCarousel() {
            const carouselTrack = document.getElementById('carouselTrack');
            const carouselDots = document.getElementById('carouselDots');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');

            // Get all slides
            const slides = carouselTrack.querySelectorAll('.group-carousel__slide');

            // Variables for carousel functionality
            let currentSlide = 0;
            let slidesPerView = getSlidesPerView();
            let totalSlides = Math.ceil(slides.length / slidesPerView);

            // Create dot indicators
            for (let i = 0; i < totalSlides; i++) {
                const dot = document.createElement('div');
                dot.className = i === 0 ? 'group-carousel__dot group-carousel__dot--active' : 'group-carousel__dot';
                dot.dataset.slide = i;
                dot.addEventListener('click', () => {
                    goToSlide(i);
                });
                carouselDots.appendChild(dot);
            }

            // Add event listeners to buttons
            prevButton.addEventListener('click', () => {
                goToSlide(currentSlide - 1);
            });

            nextButton.addEventListener('click', () => {
                goToSlide(currentSlide + 1);
            });

            // Function to go to a specific slide
            function goToSlide(slideIndex) {
                // Handle wrapping
                if (slideIndex < 0) {
                    slideIndex = totalSlides - 1;
                } else if (slideIndex >= totalSlides) {
                    slideIndex = 0;
                }

                currentSlide = slideIndex;
                updateCarousel();
            }

            // Function to update carousel display
            function updateCarousel() {
                // Update track position
                const offset = -1 * currentSlide * (100 / slidesPerView) * slidesPerView;
                carouselTrack.style.transform = `translateX(${offset}%)`;

                // Update active dot
                const dots = carouselDots.querySelectorAll('.group-carousel__dot');
                dots.forEach((dot, index) => {
                    if (index === currentSlide) {
                        dot.classList.add('group-carousel__dot--active');
                    } else {
                        dot.classList.remove('group-carousel__dot--active');
                    }
                });
            }

            // Function to determine slides per view based on viewport width
            function getSlidesPerView() {
                if (window.innerWidth >= 1200) return 4;
                if (window.innerWidth >= 992) return 3;
                if (window.innerWidth >= 768) return 2;
                return 1;
            }

            // Update slides per view on window resize
            window.addEventListener('resize', () => {
                const newSlidesPerView = getSlidesPerView();
                if (newSlidesPerView !== slidesPerView) {
                    slidesPerView = newSlidesPerView;
                    totalSlides = Math.ceil(slides.length / slidesPerView);

                    // Reset dots
                    carouselDots.innerHTML = '';
                    for (let i = 0; i < totalSlides; i++) {
                        const dot = document.createElement('div');
                        dot.className = i === currentSlide ? 'group-carousel__dot group-carousel__dot--active' : 'group-carousel__dot';
                        dot.dataset.slide = i;
                        dot.addEventListener('click', () => {
                            goToSlide(i);
                        });
                        carouselDots.appendChild(dot);
                    }

                    // Reset current slide if needed
                    if (currentSlide >= totalSlides) {
                        currentSlide = totalSlides - 1;
                    }

                    updateCarousel();
                }
            });

            // Initialize carousel display
            updateCarousel();
        }
        // Initialize the carousel when the DOM is loaded
        document.addEventListener('DOMContentLoaded', initCarousel);

        const openBtn = document.getElementById('announcement-notifications');
        const closeBtn = document.getElementById('closeAnnouncementsBtn');
        const modal = document.getElementById('announcementsModal');

        // Open modal
        openBtn.addEventListener('click', function () {
            modal.classList.add('announcements-modal--active');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        });

        // Close modal
        closeBtn.addEventListener('click', function () {
            modal.classList.remove('announcements-modal--active');
            document.body.style.overflow = ''; // Re-enable scrolling
        });

        // Close modal when clicking outside content
        modal.addEventListener('click', function (e) {
            if (e.target === modal) {
                modal.classList.remove('announcements-modal--active');
                document.body.style.overflow = '';
            }
        });

        // Close modal on Escape key press
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape' && modal.classList.contains('announcements-modal--active')) {
                modal.classList.remove('announcements-modal--active');
                document.body.style.overflow = '';
            }
        });


        // Function to initialize the sessions carousel
        function initSessionsCarousel() {
            const sessionsCarouselTrack = document.getElementById('sessionsCarouselTrack');
            const sessionsCarouselDots = document.getElementById('sessionsCarouselDots');
            const sessionPrevButton = document.getElementById('sessionPrevButton');
            const sessionNextButton = document.getElementById('sessionNextButton');

            // Get all slides
            const slides = sessionsCarouselTrack.querySelectorAll('.group-carousel__slide');

            // Variables for carousel functionality
            let currentSlide = 0;
            let slidesPerView = getSlidesPerView();
            let totalSlides = Math.ceil(slides.length / slidesPerView);

            // Create dot indicators
            for (let i = 0; i < totalSlides; i++) {
                const dot = document.createElement('div');
                dot.className = i === 0 ? 'group-carousel__dot group-carousel__dot--active' : 'group-carousel__dot';
                dot.dataset.slide = i;
                dot.addEventListener('click', () => {
                    goToSlide(i);
                });
                sessionsCarouselDots.appendChild(dot);
            }

            // Add event listeners to buttons
            sessionPrevButton.addEventListener('click', () => {
                goToSlide(currentSlide - 1);
            });

            sessionNextButton.addEventListener('click', () => {
                goToSlide(currentSlide + 1);
            });

            // Function to go to a specific slide
            function goToSlide(slideIndex) {
                // Handle wrapping
                if (slideIndex < 0) {
                    slideIndex = totalSlides - 1;
                } else if (slideIndex >= totalSlides) {
                    slideIndex = 0;
                }

                currentSlide = slideIndex;
                updateCarousel();
            }

            // Function to update carousel display
            function updateCarousel() {
                // Update track position
                const offset = -1 * currentSlide * (100 / slidesPerView) * slidesPerView;
                sessionsCarouselTrack.style.transform = `translateX(${offset}%)`;

                // Update active dot
                const dots = sessionsCarouselDots.querySelectorAll('.group-carousel__dot');
                dots.forEach((dot, index) => {
                    if (index === currentSlide) {
                        dot.classList.add('group-carousel__dot--active');
                    } else {
                        dot.classList.remove('group-carousel__dot--active');
                    }
                });
            }

            // Function to determine slides per view based on viewport width
            function getSlidesPerView() {
                if (window.innerWidth >= 1200) return 4;
                if (window.innerWidth >= 992) return 3;
                if (window.innerWidth >= 768) return 2;
                return 1;
            }

            // Update slides per view on window resize
            window.addEventListener('resize', () => {
                const newSlidesPerView = getSlidesPerView();
                if (newSlidesPerView !== slidesPerView) {
                    slidesPerView = newSlidesPerView;
                    totalSlides = Math.ceil(slides.length / slidesPerView);

                    // Reset dots
                    sessionsCarouselDots.innerHTML = '';
                    for (let i = 0; i < totalSlides; i++) {
                        const dot = document.createElement('div');
                        dot.className = i === currentSlide ? 'group-carousel__dot group-carousel__dot--active' : 'group-carousel__dot';
                        dot.dataset.slide = i;
                        dot.addEventListener('click', () => {
                            goToSlide(i);
                        });
                        sessionsCarouselDots.appendChild(dot);
                    }

                    // Reset current slide if needed
                    if (currentSlide >= totalSlides) {
                        currentSlide = totalSlides - 1;
                    }

                    updateCarousel();
                }
            });

            // Initialize carousel display
            updateCarousel();
        }

        // Initialize the sessions carousel when the DOM is loaded
        document.addEventListener('DOMContentLoaded', initSessionsCarousel);
    </script>
}